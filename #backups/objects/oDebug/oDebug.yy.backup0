// 2025-04-22 04:01:43
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create Init

// Basic/Meta
active = T
edit = F
editHelp = T
console = F
introSkip = F
skipTo = SCENE.RESORT_SUITE
resetControl = T
unstuck = T
muted = F
envInvert = T
diaDebug = F
diaShortcut = T
scnJump = T
nightSkip = F

// Variables...
diaPrev = N // For previewing dialogue that is available...
diaPrev2 = N // For previewing dialogue that is available...
diaPrev2i = N // For previewing dialogue that is available...
diaPrev2Str = ""

// Dbg Strings, 1 Auto Clear; 2 Manual Clear
dbgStr = T
dbgStr1 = ""
dbgStr2 = ""
markerStr = ""
dbgStrScrl = 0
CON = U
CONi = 0
CONpre = "dia"
CONprei = CONSOLE.DIALOGUE
CONactor = ACTOR.SYLAS
CONarr = [""]
CONstri = 0
CONinit = T

// Edit Struct
ES = U
ESsel = N
ESi = 0
ESi2 = 0
ESedit = N

if(file_exists(game_save_id+"nodes.json")) {
	
	var _str = ""
	var _f = file_text_open_read(game_save_id+"nodes.json")
	while(!file_text_eof(_f)) _str += file_text_readln(_f)
	ES = json_parse(_str)
	ESi = variable_instance_names_count(ES)
	
} else ES = {}

if(file_exists(game_save_id+"console.json")) {
	
	var _str = ""
	var _f = file_text_open_read(game_save_id+"console.json")
	while(!file_text_eof(_f)) _str += file_text_readln(_f)
	CON = json_parse(_str)
	ESi = variable_instance_names_count(ES)
	
} else CON = {}

#event step Live Update
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }
#region Other Debug Controls...
	
	if(D.game_state == GAME.PLAY and D.scene_state == GAME.PLAY) {
		
		#region DB Resets
			
			if(resetControl) {
				
				#region All
					
					if(keyboard_check_pressed(vk_f12) and !console and edit) {
						
						with(D) {
							
							// Reset Structs...
							db_scn()
							db_diaNar()
							db_act()
							db_context()
							
						}
						
						// Return Suit...
						P.suited = F
						P.suitedo = P.suited
						
						#region Environmental
							
							if(variable_instance_exists(S[$ string(D.scni)],K.ENV)) {
								
								#region Blending...
									
									if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD)) {
										
										#region Single Blend
											
											if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.MT)) {
												
												// Single Blend... w/ Multiplier
												if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD]); // Brighter...
												else scene_set_blend(color_brightness(S[$ string(D.scni)][$ K.SCN+K.BLD],S[$ string(D.scni)][$ K.SCN+K.BLD+K.MT])); // Darker...
												
											} else {
												
												// Single Blend... No Multiplier, Default 1/4
												if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD]); // Brighter...
												else scene_set_blend(color_brightness(S[$ string(D.scni)][$ K.SCN+K.BLD],1/4)); // Darker...
												
											}
											
										#endregion
										
									} else if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.TR)
										and variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.FL)) {
										
										// True & False Blend...
										if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD+K.TR]); // Brighter...
										else scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD+K.FL]); // Darker...
										
									} else if(!variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.TR)
										and variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.FL)) {
										
										// False Only Blend...
										if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(c.wht); // Brighter...
										else scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD+K.FL]); // Darker?
										
									} else if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.TR)
										and !variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.FL)) {
										
										// True Only Blend...
										if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD+K.TR]); // Brighter?
										else scene_set_blend(c.dgry); // Darker...
										
									} else {
										
										#region No Blend
											
											if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.MT)) {
												
												// No Blend... w/ Multiplier
												if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(c.wht); // Brighter...
												else scene_set_blend(color_brightness(c.wht,S[$ string(D.scni)][$ K.SCN+K.BLD+K.MT])); // Darker...
												
											} else {
												
												// No Blend... No Multiplier, Default 1/4
												if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(c.wht); // Brighter...
												else scene_set_blend(color_brightness(c.wht,1/4)); // Darker...
												
											}
											
										#endregion
										
									}
									
								#endregion
								
							} else scene_set_blend(c.wht); // Default if no environment set... No Blend...
							
						#endregion
						
						// Exit Edit Mode
						edit = F
						
					}
					
				#endregion
				
			}
			
		#endregion
		
		#region Environment Invert/Toggle (For Testing Blend Switching)
			
			if(keyboard_check_pressed(vk_f3) and !console and edit and envInvert) {
				
				#region Environmental
					
					if(variable_instance_exists(S[$ string(D.scni)],K.ENV)) {
						
						// Invert Env
						S[$ string(D.scni)][$ K.ENV] = !S[$ string(D.scni)][$ K.ENV]
						
						#region Blending...
							
							if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD)) {
								
								#region Single Blend
									
									if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.MT)) {
										
										// Single Blend... w/ Multiplier
										if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD]); // Brighter...
										else scene_set_blend(color_brightness(S[$ string(D.scni)][$ K.SCN+K.BLD],S[$ string(D.scni)][$ K.SCN+K.BLD+K.MT])); // Darker...
										
									} else {
										
										// Single Blend... No Multiplier, Default 1/4
										if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD]); // Brighter...
										else scene_set_blend(color_brightness(S[$ string(D.scni)][$ K.SCN+K.BLD],1/4)); // Darker...
										
									}
									
								#endregion
								
							} else if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.TR)
								and variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.FL)) {
								
								// True & False Blend...
								if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD+K.TR]); // Brighter...
								else scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD+K.FL]); // Darker...
								
							} else if(!variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.TR)
								and variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.FL)) {
								
								// False Only Blend...
								if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(c.wht); // Brighter...
								else scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD+K.FL]); // Darker?
								
							} else if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.TR)
								and !variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.FL)) {
								
								// True Only Blend...
								if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(S[$ string(D.scni)][$ K.SCN+K.BLD+K.TR]); // Brighter?
								else scene_set_blend(c.dgry); // Darker...
								
							} else {
								
								#region No Blend
									
									if(variable_instance_exists(S[$ string(D.scni)],K.SCN+K.BLD+K.MT)) {
										
										// No Blend... w/ Multiplier
										if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(c.wht); // Brighter...
										else scene_set_blend(color_brightness(c.wht,S[$ string(D.scni)][$ K.SCN+K.BLD+K.MT])); // Darker...
										
									} else {
										
										// No Blend... No Multiplier, Default 1/4
										if(S[$ string(D.scni)][$ K.ENV]) scene_set_blend(c.wht); // Brighter...
										else scene_set_blend(color_brightness(c.wht,1/4)); // Darker...
										
									}
									
								#endregion
								
							}
							
						#endregion
						
					} else scene_set_blend(c.wht); // Default if no environment set... No Blend...
					
				#endregion
				
				// Exit Edit Mode
				edit = F
				
			}
			
		#endregion
		
		#region Mute Toggle
			
			if(keyboard_check_pressed(vk_f2) and !console and edit) {
				
				muted = !muted
				if(muted) audio_pause_all();
				else audio_resume_all()
				
				// Exit Edit Mode
				edit = F
				
			}
			
		#endregion
		
		#region Unstuck
			
			if(unstuck) {
				
				if(keyboard_check_pressed(vk_f1) and !console and edit) {
					
					diaNar_close(F)
					
					// Exit Edit Mode
					edit = F
					
				}
				
			}
			
		#endregion
		
	}
	
#endregion

#event draw_end Editor
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }

#region Editor Controls and Drawing
	
	#region Debug XY Struct Logic || Dev Tool || For plotting Interaction nodes throught scenes into a json file (much needed) || Available during debug
		
		if(!variable_instance_exists(ES,string(ESi)) or ES[$ string(ESi)] == N)
			ES[$ string(ESi)] = {} // Init Next Entry
		else {
			
			#region Debug XY Struct Editing Active || Entry Creation & Draw Logic
				
				// Toggle Debug XY Struct Editing...
				if(keyboard_check_pressed(vk_home)) edit = !edit
				
				if(edit) {
					
					#region Debug Scene Jump/TP Logic (+/- keys)
						
						if(scnJump) {
							
							if(keyboard_check_pressed(vk_subtract)) {
								
								if(keyboard_check(vk_shift)) {
									
									// Region Jump Down
									if(D.scni <= SCENE.CITY_PLAZA) set_scni(SCENE.RESORT_BED);
									else if(D.scni <= SCENE.CLUB_ENT) set_scni(SCENE.CITY_PLAZA);
									else if(D.scni <= SCENE.BROTH_ENT) set_scni(SCENE.CLUB_ENT);
									else if(D.scni <= SCENE.SPACEPORT_ENT) set_scni(SCENE.BROTH_ENT);
									else if(D.scni <= SCENE.SLUM_A1) set_scni(SCENE.SPACEPORT_ENT);
									else if(D.scni <= SCENE.COCKPIT_PRAEY) set_scni(SCENE.SLUM_A1);
									
								} else set_scni(D.scni-1); // Iterate 1 Scene Down
								
							} else if(keyboard_check_pressed(vk_add)) {
								
								if(keyboard_check(vk_shift)) {
									
									// Region Jump Up
									if(D.scni <= SCENE.RESORT_COURT1) set_scni(SCENE.RESORT_COURT2);
									else if(D.scni <= SCENE.CITY_ST4) set_scni(SCENE.CITY_STORE);
									else if(D.scni <= SCENE.BROTH_G2) set_scni(SCENE.BROTH_B);
									else if(D.scni <= SCENE.SPACEPORT_HANG1) set_scni(SCENE.SPACEPORT_HANG2);
									else if(D.scni <= SCENE.SLUM_A3) set_scni(SCENE.SLUM_BOD);
									else if(D.scni <= SCENE.COCKPIT_PRAEY) set_scni(SCENE.COCKPIT_PRAEY);
									
								} else set_scni(D.scni+1); // Iterate 1 Scene Up
								
							}
							
						}
						
					#endregion
					
					#region Debug XY Struct Editing Other Controls
						
						// If we MBMP outside all entries, this effectively acts as a deselect...
						if(MBMP) ESsel = N
						
						if(keyboard_check_pressed(vk_pageup)) {
							
							// Iterate to next entry/instance of ES(struct of structs) in debug viewer
							if(ESi2 >= variable_instance_names_count(ES)) ESi2 = 0
							else ESi2 += 1
							
						} else if(keyboard_check_pressed(vk_pagedown)) {
							
							// Iterate to previous entry/instance of ES(struct of structs) in debug viewer
							if(ESi2 <= 0) ESi2 = variable_instance_names_count(ES)
							else ESi2 -= 1
							
						} else if(keyboard_check_pressed(vk_delete)) {
							
							if(ESsel != N) ES[$ string(ESsel)] = N
							
						}
						
					#endregion
						
					#region XY Marker... (Idk why xy is mouse is drifted... FIXED but still used...)
						
						if(ds_list_empty(D.diaParL)) {
							
							var _dw2 = (D.bgImg.sprite_width-WW)/2
							var _dh2 = (D.bgImg.sprite_height-WH)/2
							
							// Init (First coordinate)
							var _xy4 = [MXPCT*D.bgImg.sprite_width+D.bgImg.dltx-_dw2,
								MYPCT*D.bgImg.sprite_height+D.bgImg.dlty-_dh2]
							
							draw_set_alpha(1)
							draw_circle_color(_xy4[0],_xy4[1],5,c.wht,c.blk,F)
							
						}
						
					#endregion
					
					#region Rectangle Entry (Left Click 2x for opposite corners to set)
						
						if(MBLP and ds_list_empty(D.diaParL)) {
							
							#region Init Rectangle Entry (If New)
								
								if(!variable_instance_exists(ES[$ string(ESi)],K.SCN+K.IN)) {
									
									ES[$ string(ESi)][$ K.SCN+K.IN] = D.scni
									ES[$ string(ESi)][$ K.SHP] = "rect"
									ES[$ string(ESi)][$ K.FND] = F
									ES[$ string(ESi)][$ K.HVR] = F
									ES[$ string(ESi)][$ K.HLT] = F
									
								}
								
							#endregion
							
							#region Set Coordinates
								
								// Ensure is Rectangle otherwise don'T do anything
								if(ES[$ string(ESi)][$ K.SHP] == "rect") {
									
									if(!variable_instance_exists(ES[$ string(ESi)],K.XY4)) {
										
										// Set First Coordinate if xy4 doesn'T even exist
										ES[$ string(ESi)][$ K.XY4] = [MXPCT,MYPCT]
										ES[$ string(ESi)][$ K.WH2]  = [D.bgImg.sprite_width,D.bgImg.sprite_height]
										
									} else if(array_length(ES[$ string(ESi)][$ K.XY4]) == 2) {
										
										// xy4 exists and is size 2, so we set the 2nd coordinate
										ES[$ string(ESi)][$ K.XY4][2] = MXPCT
										ES[$ string(ESi)][$ K.XY4][3] = MYPCT
										
										// With 2nd Coordinate set, this entry is done aside from str entry
										// We iterate ESi to go on to make the next entry
										ESi += 1
										
									}
									
								}
								
							#endregion
							
						}
						
					#endregion
					
					#region Circle Entry (Right Click + Drag to set w/ size) (Like a Node)
						
						if(MBR and ds_list_empty(D.diaParL)) {
							
							if(MBRP) {
								
								#region Init Circle Entry (Should be new as this is all done with one click+drag)
									
									if(!variable_instance_exists(ES[$ string(ESi)],K.SCN+K.IN)) {
										
										ES[$ string(ESi)][$ K.SCN+K.IN] = D.scni
										ES[$ string(ESi)][$ K.SHP] = "circ"
										ES[$ string(ESi)][$ K.FND] = F
										ES[$ string(ESi)][$ K.HVR] = F
										ES[$ string(ESi)][$ K.HLT] = F
										ES[$ string(ESi)][$ K.XY2] = [MXPCT,MYPCT]
										ES[$ string(ESi)][$ K.WH2]  = [D.bgImg.sprite_width,D.bgImg.sprite_height]
										ES[$ string(ESi)][$ K.RAD]  = 0
										
									}
									
								#endregion
								
							}
							
							#region Set circle size (RMB + Drag)
								
								// Ensure is Circle, otherwise don'T do anything
								if(ES[$ string(ESi)][$ K.SHP] == "circ") {
									
									var _dw2 = (D.bgImg.sprite_width-WW)/2
									var _dh2 = (D.bgImg.sprite_height-WH)/2
									
									// Init xy2
									var _xy2 = [ES[$ string(ESi)][$ K.XY2][0]*ES[$ string(ESi)][$ K.WH2][0]+D.bgImg.dltx-_dw2,
										ES[$ string(ESi)][$ K.XY2][1]*ES[$ string(ESi)][$ K.WH2][1]+D.bgImg.dlty-_dh2]
									
									// Adjust Radius/Size based on distance from initial click
									ES[$ string(ESi)][$ K.RAD] = point_distance(WMX,WMY,_xy2[0],_xy2[1])
									
								}
								
							#endregion
							
						} else if(MBRR) {
							
							#region Iterate/finish circle entry (RMB Release)
								
								if(variable_instance_exists(ES[$ string(ESi)],K.SCN+K.IN))
									if(ES[$ string(ESi)][$ K.SHP] == "circ")
										ESi += 1
								
							#endregion
							
						}
						
					#endregion
					
					#region Draw Each Debug XY Entry per room & Edit/Control Logic
						
						// Init Font
						var fo = draw_get_font()
						draw_set_font(fDebug)
						
						// Loop through all the entries in ES
						// (a struct of structs, each struct an entry with relevant data)
						for(var i = 0; i < variable_instance_names_count(ES); i++) {
							
							// Skip deleted entries
							if(!is(ES[$ string(i)])) continue
							
							// Is it an actual entry yet? If K.SCN+K.IN ain'T set then it ain'T defined at all yet
							if(variable_instance_exists(ES[$ string(i)],K.SCN+K.IN)) {
								
								#region Ensure Toggle Variable Instances Exist in all entries
									
									if(!variable_instance_exists(ES[$ string(i)],K.FND))
										ES[$ string(i)][$ K.FND] = F
									if(!variable_instance_exists(ES[$ string(i)],K.HVR))
										ES[$ string(i)][$ K.HVR] = F
									if(!variable_instance_exists(ES[$ string(i)],K.HLT))
										ES[$ string(i)][$ K.HLT] = F
									if(!variable_instance_exists(ES[$ string(i)],K.DTR))
										ES[$ string(i)][$ K.DTR] = F
									
								#endregion
								
								#region Scene WH Sanity
									
									if(variable_instance_exists(ES[$ string(i)],K.WH2))
										ES[$ string(i)][$ K.WH2] = [D.bgImg.sprite_width,D.bgImg.sprite_height]
									
								#endregion
								
								#region Are we in the room?
									
									if(ES[$ string(i)][$ K.SCN+K.IN] == D.scni) {
										
										#region What shape? Circle or Rectangle?
											
											if(variable_instance_exists(ES[$ string(i)],K.SHP)) {
												
												if(ES[$ string(i)][$ K.SHP] == "rect") {
													
													#region Draw Debug XY Rectangles
														
														if(variable_instance_exists(ES[$ string(i)],K.XY4)) {
															
															#region Init
																
																var _dw2 = (D.bgImg.sprite_width-WW)/2
																var _dh2 = (D.bgImg.sprite_height-WH)/2
																
																// Init (First coordinate)
																var _xy4 = [ES[$ string(i)][$ K.XY4][0]*ES[$ string(i)][$ K.WH2][0]+D.bgImg.dltx-_dw2,
																	ES[$ string(i)][$ K.XY4][1]*ES[$ string(i)][$ K.WH2][1]+D.bgImg.dlty-_dh2]
																
																// Draw First Coordinate
																draw_circle_color(_xy4[0],_xy4[1],5,c_white,c_white,F)
																
															#endregion
															
															#region 2nd Coordinate?
																
																if(array_length(ES[$ string(i)][$ K.XY4]) == 4) {
																	
																	#region Do have 2nd Coordinate, Full Draw
																		
																		// Init 2nd Coordinate
																		_xy4[2] = ES[$ string(i)][$ K.XY4][2]*ES[$ string(i)][$ K.WH2][0]+D.bgImg.dltx-_dw2
																		_xy4[3] = ES[$ string(i)][$ K.XY4][3]*ES[$ string(i)][$ K.WH2][1]+D.bgImg.dlty-_dh2
																		
																		// Draw 2nd Coor
																		draw_circle_color(_xy4[2],_xy4[3],5,c_white,c_white,F)
																		
																		// If inside rectangle, select w/ middle mouse button
																		if(mouse_in_rectangle(_xy4) and MBMP) {
																			
																			keyboard_string = ""
																			ESsel = i
																			ESi2 = i
																			
																		}
																		
																		// set rect alpha 20%
																		var ao = draw_get_alpha()
																		draw_set_alpha(1/5)
																		
																		// Selected or not?
																		if(ESsel == i) {
																			
																			// Selected (yellow)
																			draw_rectangle_color(_xy4[0],_xy4[1],_xy4[2],_xy4[3],
																				c.ylw,c.ylw,c.ylw,c.ylw,F)
																			
																		} else if(i == ESi2) {
																			
																			// Debug Display (red)
																			draw_rectangle_color(_xy4[0],_xy4[1],_xy4[2],_xy4[3],
																				c.r,c.r,c.r,c.r,F)
																			
																		} else {
																			
																			// Unselected (white)
																			draw_rectangle_color(_xy4[0],_xy4[1],_xy4[2],_xy4[3],
																				c.wht,c.wht,c.wht,c.wht,F)
																			
																		}
																		
																		#region Draw Additional Vars
																			
																			// Init
																			var hvo = [draw_get_halign(),draw_get_valign()]
																			draw_set_hvalign([fa_center,fa_middle])
																			var _str = ""
																			var _str2 = ""
																			
																			#region Basics
																				
																				#region String Draw
																					
																					if(variable_instance_exists(ES[$ string(i)],K.STR)) {
																						
																						if(_str != "") _str += "\n"
																						_str += "str: \""+ES[$ string(i)][$ K.STR]+"\""
																						
																					}
																					
																				#endregion
																				
																				#region To_Room
																					
																					if(variable_instance_exists(ES[$ string(i)],K.SCN+K.TO)) {
																						
																						if(_str != "") _str += "\n"
																						if(!is_string_real(ES[$ string(i)][$ K.SCN+K.TO])) _str += "scene_to: "+string(ES[$ string(i)][$ K.SCN+K.TO]);
																						else _str += "scene_to: "+string(ES[$ string(i)][$ K.SCN+K.TO])+"("+SCENEn[real(ES[$ string(i)][$ K.SCN+K.TO])]+")";
																						
																					}
																					
																				#endregion
																				
																			#endregion
																			
																			#region Toggles
																				
																				#region Find?
																					
																					if(variable_instance_exists(ES[$ string(i)],K.FND)) {
																						
																						if(ES[$ string(i)][$ K.FND]) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Must Find"
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Hilight?
																					
																					if(variable_instance_exists(ES[$ string(i)],K.HLT)) {
																						
																						if(ES[$ string(i)][$ K.HLT]) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Highlights"
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Hover?
																					
																					if(variable_instance_exists(ES[$ string(i)],K.HVR)) {
																						
																						if(ES[$ string(i)][$ K.HVR]) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Hover"
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Destroy?
																					
																					if(variable_instance_exists(ES[$ string(i)],K.DTR)) {
																						
																						if(ES[$ string(i)][$ K.DTR]) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Destroy"
																							
																						}
																						
																					}
																					
																				#endregion
																				
																			#endregion
																			
																			// Add to _str
																			if(_str2 != "") _str += "\n"+_str2
																			_str2 = "" // Reset
																			
																			#region Timer/Delay
																				
																				#region Timer
																					
																					if(variable_instance_exists(ES[$ string(i)],K.TMR)) {
																						
																						if(ES[$ string(i)][$ K.TMR] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Timer: "+string(ES[$ string(i)][$ K.TMR])
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Delay
																					
																					if(variable_instance_exists(ES[$ string(i)],K.DL)) {
																						
																						if(ES[$ string(i)][$ K.DL] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Delay: "+string(ES[$ string(i)][$ K.DL])
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region X Offset
																					
																					if(variable_instance_exists(ES[$ string(i)],K.XOF)) {
																						
																						if(ES[$ string(i)][$ K.XOF] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "X Offset: "+string(ES[$ string(i)][$ K.XOF])
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Y Offset
																					
																					if(variable_instance_exists(ES[$ string(i)],K.YOF)) {
																						
																						if(ES[$ string(i)][$ K.YOF] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Y Offset: "+string(ES[$ string(i)][$ K.YOF])
																							
																						}
																						
																					}
																					
																				#endregion
																				
																			#endregion
																			
																			// Add to _str
																			if(_str2 != "") _str += "\n"+_str2
																			_str2 = "" // Reset
																			
																			#region Assets
																			
																				#region Animation (A sprite w/ frames)
																					
																					if(variable_instance_exists(ES[$ string(i)],K.ANM)) {
																						
																						if(ES[$ string(i)][$ K.ANM] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Anim: \""+string(ES[$ string(i)][$ K.ANM])+"\""
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Sprite
																					
																					if(variable_instance_exists(ES[$ string(i)],K.SPR)) {
																						
																						if(ES[$ string(i)][$ K.SPR] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "Sprite: \""+string(ES[$ string(i)][$ K.SPR])+"\""
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Sound
																					
																					if(variable_instance_exists(ES[$ string(i)],K.SND)) {
																						
																						if(ES[$ string(i)][$ K.SND] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							_str2 += "SFX: \""+string(ES[$ string(i)][$ K.SND])+"\""
																							
																						}
																						
																					}
																					
																				#endregion
																				
																			#endregion
																			
																			// Add to _str
																			if(_str2 != "") _str += "\n"+_str2
																			_str2 = "" // Reset
																			
																			#region Assets 2
																				
																				#region Entity
																					
																					if(variable_instance_exists(ES[$ string(i)],K.ENT)) {
																						
																						if(ES[$ string(i)][$ K.ENT] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							if(!is_string_real(ES[$ string(i)][$ K.ENT])) _str2 += "Entity: \""+string(ES[$ string(i)][$ K.ENT])+"\"";
																							else _str2 += "Entity: "+string(ES[$ string(i)][$ K.ENT])+"("+ACTORn[real(ES[$ string(i)][$ K.ENT])]+")";
																							// If real, points to an actor, otherwise string could be anything else...
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Click
																					
																					if(variable_instance_exists(ES[$ string(i)],K.CLK)) {
																						
																						if(ES[$ string(i)][$ K.CLK] != N) {
																							
																							if(_str2 != "") _str2 += ", ";
																							if(!is_string_real(ES[$ string(i)][$ K.CLK])) _str2 += "Click: "+string(ES[$ string(i)][$ K.CLK]);
																							else _str2 += "Click: "+string(ES[$ string(i)][$ K.CLK])+"("+Vn[real(ES[$ string(i)][$ K.CLK])]+")";
																							
																						}
																						
																					}
																					
																				#endregion
																				
																				#region Surface
																					
																					if(variable_instance_exists(ES[$ string(i)],K.SRF)) {
																						
																						if(ES[$ string(i)][$ K.SRF] != N) {
																							
																							if(_str2 != "") _str2 += ", "
																							if(!is_string_real(ES[$ string(i)][$ K.SRF])) _str2 += "Surface: \""+string(ES[$ string(i)][$ K.SRF])+"\"";
																							else _str2 += "Surface: "+string(ES[$ string(i)][$ K.SRF]);
																							// If real, just show number...
																							
																						}
																						
																					}
																					
																				#endregion
																				
																			#endregion
																			
																			// Add to _str
																			if(_str2 != "") _str += "\n"+_str2
																			_str2 = "" // Reset
																			
																			// Draw and Reset
																			var _xx = lerp(_xy4[0],_xy4[2],1/2)
																			var _yy = lerp(_xy4[1],_xy4[3],1/2)
																			draw_text_color(_xx,_yy,_str,c.wht,c.wht,c.wht,c.wht,1)
																			draw_set_hvalign(hvo)
																			
																		#endregion
																		
																		// Reset alpha
																		draw_set_alpha(ao)
																		
																	#endregion
																	
																} else {
																	
																	#region No 2nd Entry yet... Maybe we want to cancel?
																		
																		// Don'T have 2nd Coordinate?
																		if(keyboard_check_pressed(vk_backspace)) {
																			
																			// Delete/Cancel this Entry
																			ES[$ string(i)] = N
																			
																		}
																		
																	#endregion
																	
																}
																
															#endregion
															
														}
														
													#endregion
													
												} else if(ES[$ string(i)][$ K.SHP] == "circ") {
													
													#region Draw Debug XY Circles
														
														#region Inits
															
															var _dw2 = (D.bgImg.sprite_width-WW)/2
															var _dh2 = (D.bgImg.sprite_height-WH)/2
															
															var _xy2 = [ES[$ string(i)][$ K.XY2][0]*ES[$ string(i)][$ K.WH2][0]+D.bgImg.dltx-_dw2,
																ES[$ string(i)][$ K.XY2][1]*ES[$ string(i)][$ K.WH2][1]+D.bgImg.dlty-_dh2]
															var _rad = real(ES[$ string(i)][$ K.RAD])
															
															// Draw Coordinate
															draw_circle_color(_xy2[0],_xy2[1],3,c.r,c.r,F)
															
															// Selected?
															if(mouse_in_circle(_xy2,_rad) and MBMP) {
																
																keyboard_string = ""
																ESsel = i
																ESi2 = i
																
															}
															
															// set rect alpha 20%
															var ao = draw_get_alpha()
															draw_set_alpha(1/5)
															
														#endregion
														
														#region Draw Radius
															
															if(i == ESsel) {
																
																// Selected, Draw Yellow
																// Draw Radius (Hilight)
																draw_circle_color(_xy2[0],_xy2[1],_rad,c.ylw,c.ylw,F)
																
															} else if(i == ESi2) {
																
																// Displayed in Debug, Draw Red
																// Draw Radius (Hilight)
																draw_circle_color(_xy2[0],_xy2[1],_rad,c.r,c.r,F)
																
															} else {
																
																// Unselected, Draw White
																// Draw Radius (Hilight)
																draw_circle_color(_xy2[0],_xy2[1],_rad,c.wht,c.wht,F)
																
															}
															
														#endregion
														
														#region Draw Additional Vars
															
															// Init
															var hvo = [draw_get_halign(),draw_get_valign()]
															draw_set_hvalign([fa_center,fa_middle])
															var _str = ""
															var _str2 = ""
															
															#region Basics
																
																// String Draw
																if(variable_instance_exists(ES[$ string(i)],K.STR)) {
																	
																	if(_str != "") _str += "\n"
																	_str += "str: \""+ES[$ string(i)][$ K.STR]+"\""
																	
																}
																
																// To_Room
																if(variable_instance_exists(ES[$ string(i)],K.SCN+K.TO)) {
																	
																	if(_str != "") _str += "\n"
																	if(!is_string_real(ES[$ string(i)][$ K.SCN+K.TO])) _str += "scene_to: "+string(ES[$ string(i)][$ K.SCN+K.TO]);
																	else _str += "scene_to: "+string(ES[$ string(i)][$ K.SCN+K.TO])+"("+SCENEn[real(ES[$ string(i)][$ K.SCN+K.TO])]+")";
																	
																}
																
															#endregion
															
															#region Toggles
																
																// Find?
																if(variable_instance_exists(ES[$ string(i)],K.FND)) {
																	
																	if(ES[$ string(i)][$ K.FND]) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "Must Find"
																		
																	}
																	
																}
																
																// Hilight?
																if(variable_instance_exists(ES[$ string(i)],K.HLT)) {
																	
																	if(ES[$ string(i)][$ K.HLT]) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "Highlights"
																		
																	}
																	
																}
																
																// Hover?
																if(variable_instance_exists(ES[$ string(i)],K.HVR)) {
																	
																	if(ES[$ string(i)][$ K.HVR]) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "Hover"
																		
																	}
																	
																}
																
																// Destroy?
																if(variable_instance_exists(ES[$ string(i)],K.DTR)) {
																	
																	if(ES[$ string(i)][$ K.DTR]) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "Destroy"
																		
																	}
																	
																}
																
															#endregion
															
															// Add to _str
															if(_str2 != "") _str += "\n"+_str2
															_str2 = "" // Reset
															
															#region Timer/Delay
																
																// Timer
																if(variable_instance_exists(ES[$ string(i)],K.TMR)) {
																	
																	if(ES[$ string(i)][$ K.TMR] != N) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "Timer: "+string(ES[$ string(i)][$ K.TMR])
																		
																	}
																	
																}
																
																// Delay
																if(variable_instance_exists(ES[$ string(i)],K.DL)) {
																	
																	if(ES[$ string(i)][$ K.DL] != N) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "Delay: " + string(ES[$ string(i)][$ K.DL])
																		
																	}
																	
																}
																
																#region X Offset
																	
																	if(variable_instance_exists(ES[$ string(i)],K.XOF)) {
																		
																		if(ES[$ string(i)][$ K.XOF] != N) {
																			
																			if(_str2 != "") _str2 += ", "
																			_str2 += "X Offset: "+string(ES[$ string(i)][$ K.XOF])
																			
																		}
																		
																	}
																	
																#endregion
																
																#region Y Offset
																	
																	if(variable_instance_exists(ES[$ string(i)],K.YOF)) {
																		
																		if(ES[$ string(i)][$ K.YOF] != N) {
																			
																			if(_str2 != "") _str2 += ", "
																			_str2 += "Y Offset: "+string(ES[$ string(i)][$ K.YOF])
																			
																		}
																		
																	}
																	
																#endregion
																
															#endregion
															
															// Add to _str
															if(_str2 != "") _str += "\n"+_str2
															_str2 = "" // Reset
															
															#region Assets
															
																// Animation (A sprite w/ frames)
																if(variable_instance_exists(ES[$ string(i)],K.ANM)) {
																	
																	if(ES[$ string(i)][$ K.ANM] != N) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "Anim: " + string(ES[$ string(i)][$ K.ANM])
																		
																	}
																	
																}
																
																// Sprite
																if(variable_instance_exists(ES[$ string(i)],K.SPR)) {
																	
																	if(ES[$ string(i)][$ K.SPR] != N) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "Sprite: " + string(ES[$ string(i)][$ K.SPR])
																		
																	}
																	
																}
																
																// Sound
																if(variable_instance_exists(ES[$ string(i)],K.SND)) {
																	
																	if(ES[$ string(i)][$ K.SND] != N) {
																		
																		if(_str2 != "") _str2 += ", "
																		_str2 += "SFX: " + string(ES[$ string(i)][$ K.SND])
																		
																	}
																	
																}
																
															#endregion
															
															// Add to _str
															if(_str2 != "") _str += "\n"+_str2
															_str2 = "" // Reset
															
															#region Assets 2
																
																// Entity
																if(variable_instance_exists(ES[$ string(i)],K.ENT)) {
																	
																	if(ES[$ string(i)][$ K.ENT] != N) {
																		
																		if(_str2 != "") _str2 += ", "
																		if(!is_string_real(ES[$ string(i)][$ K.ENT])) _str2 += "Entity: \""+string(ES[$ string(i)][$ K.ENT])+"\"";
																		else _str2 += "Entity: "+string(ES[$ string(i)][$ K.ENT])+"("+ACTORn[real(ES[$ string(i)][$ K.ENT])]+")";
																		// If real, points to an actor, otherwise string could be anything else...
																		
																	}
																	
																}
																
																// Click
																if(variable_instance_exists(ES[$ string(i)],K.CLK)) {
																	
																	if(ES[$ string(i)][$ K.CLK] != N) {
																		
																		if(_str2 != "") _str2 += ", ";
																		if(!is_string_real(ES[$ string(i)][$ K.CLK])) _str2 += "Click: "+string(ES[$ string(i)][$ K.CLK]);
																		else _str2 += "Click: "+string(ES[$ string(i)][$ K.CLK])+"("+Vn[real(ES[$ string(i)][$ K.CLK])]+")";
																		
																	}
																	
																}
																
															#endregion
															
															// Add to _str
															if(_str2 != "") _str += "\n"+_str2
															_str2 = "" // Reset
															
															// Draw and Reset
															draw_text_color(_xy2[0],_xy2[1],_str,c.wht,c.wht,c.wht,c.wht,1)
															draw_set_hvalign(hvo)
															
														#endregion
														
														// Reset Alpha
														draw_set_alpha(ao)
														
													#endregion
													
												}
												
											}
											
										#endregion
										
									}
									
								#endregion
								
							}
							
						}
						
						// Reset Font
						draw_set_font(fo)
						
					#endregion
					
					#region Entry Edits (Selected and using hotkeys to set additional variables to an entry)
						
						if(is(ES[$ string(ESsel)])) {
							
							if(ESedit == N) {
								
								#region Entry Edit Controls
									
									if(keyboard_check_pressed(ord("M"))) {
										
										#region Init Message(string) Edit
											
											ESedit = EDIT.TEXT
											if(variable_instance_exists(ES[$ string(ESsel)],K.STR))
												keyboard_string = ES[$ string(ESsel)][$ K.STR]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.STR] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("R"))) {
										
										#region Init To_Room Edit
											
											ESedit = EDIT.TO_SCENE
											if(variable_instance_exists(ES[$ string(ESsel)],K.SCN+K.TO))
												keyboard_string = ES[$ string(ESsel)][$ K.SCN+K.TO]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.SCN+K.TO] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("F"))) {
										
										#region Init Findable Toggle
											
											keyboard_string = ""
											ESedit = N
											if(!variable_instance_exists(ES[$ string(ESsel)],K.FND)) ES[$ string(ESsel)][$ K.FND] = T
											else ES[$ string(ESsel)][$ K.FND] = !ES[$ string(ESsel)][$ K.FND]
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("L"))) {
										
										#region Init Hilite Toggle
											
											keyboard_string = ""
											ESedit = N
											if(!variable_instance_exists(ES[$ string(ESsel)],K.HLT)) ES[$ string(ESsel)][$ K.HLT] = T
											else ES[$ string(ESsel)][$ K.HLT] = !ES[$ string(ESsel)][$ K.HLT]
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("H"))) {
										
										#region Init Hover Toggle
											
											keyboard_string = ""
											ESedit = N
											if(!variable_instance_exists(ES[$ string(ESsel)],K.HVR)) ES[$ string(ESsel)][$ K.HVR] = T
											else ES[$ string(ESsel)][$ K.HVR] = !ES[$ string(ESsel)][$ K.HVR]
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("K"))) {
										
										#region Init Destroy Toggle
											
											keyboard_string = ""
											ESedit = N
											if(!variable_instance_exists(ES[$ string(ESsel)],K.DTR)) ES[$ string(ESsel)][$ K.DTR] = T
											else ES[$ string(ESsel)][$ K.DTR] = !ES[$ string(ESsel)][$ K.DTR]
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("T"))) {
										
										#region Timer
											
											ESedit = EDIT.TIMER
											if(variable_instance_exists(ES[$ string(ESsel)],K.TMR))
												keyboard_string = ES[$ string(ESsel)][$ K.TMR]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.TMR] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("D"))) {
										
										#region Delay
											
											ESedit = EDIT.DELAY
											if(variable_instance_exists(ES[$ string(ESsel)],K.DL))
												keyboard_string = ES[$ string(ESsel)][$ K.DL]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.DL] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("X"))) {
										
										#region X Offset
											
											ESedit = EDIT.XOFFSET
											if(variable_instance_exists(ES[$ string(ESsel)],K.XOF))
												keyboard_string = ES[$ string(ESsel)][$ K.XOF]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.XOF] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("Y"))) {
										
										#region Y Offset
											
											ESedit = EDIT.YOFFSET
											if(variable_instance_exists(ES[$ string(ESsel)],K.YOF))
												keyboard_string = ES[$ string(ESsel)][$ K.YOF]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.YOF] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("A"))) {
										
										#region Animation
											
											ESedit = EDIT.ANIMATION
											if(variable_instance_exists(ES[$ string(ESsel)],K.ANM))
												keyboard_string = ES[$ string(ESsel)][$ K.ANM]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.ANM] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("S"))) {
										
										#region Sprite
											
											ESedit = EDIT.SPRITE
											if(variable_instance_exists(ES[$ string(ESsel)],K.SPR))
												keyboard_string = ES[$ string(ESsel)][$ K.SPR]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.SPR] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("O"))) {
										
										#region Sound
											
											ESedit = EDIT.SOUND
											if(variable_instance_exists(ES[$ string(ESsel)],K.SND))
												keyboard_string = ES[$ string(ESsel)][$ K.SND]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.SND] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("E"))) {
										
										#region Entity
											
											ESedit = EDIT.ENTITY
											if(variable_instance_exists(ES[$ string(ESsel)],K.ENT))
												keyboard_string = ES[$ string(ESsel)][$ K.ENT]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.ENT] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("C"))) {
										
										#region Click
											
											ESedit = EDIT.CLICK
											if(variable_instance_exists(ES[$ string(ESsel)],K.CLK))
												keyboard_string = ES[$ string(ESsel)][$ K.CLK]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.CLK] = ""
												
											}
											
										#endregion
										
									} else if(keyboard_check_pressed(ord("U"))) {
										
										#region Surface
											
											ESedit = EDIT.SURFACE
											if(variable_instance_exists(ES[$ string(ESsel)],K.SRF))
												keyboard_string = ES[$ string(ESsel)][$ K.SRF]
											else {
												
												keyboard_string = ""
												ES[$ string(ESsel)][$ K.SRF] = ""
												
											}
											
										#endregion
										
									}
									
								#endregion
								
							} else {
								
								#region Confirm Input
									
									if(ESedit == EDIT.TEXT) { // String/Text Edit STR
										
										#region Message
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.STR] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.STR)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.STR] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.TO_SCENE) { // To_Room Edit SCENE
										
										#region To Room
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.SCN+K.TO] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.SCN+K.TO)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.SCN+K.TO] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.TIMER) { // Timer Edit #
										
										#region Timer
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.TMR] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.TMR)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.TMR] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.DELAY) { // Delay Edit #
										
										#region Delay
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.DL] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.DL)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.DL] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.XOFFSET) { // Delay Edit #
										
										#region X Offset
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.XOF] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.XOF)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.XOF] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.YOFFSET) { // Delay Edit #
										
										#region Y Offset
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.YOF] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.YOF)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.YOF] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.ANIMATION) { // Animation Edit STR
										
										#region Animation
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.ANM] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.ANM)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.ANM] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.SPRITE) { // Sprite Edit STR
										
										#region Sprite
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.SPR] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.SPR)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.SPR] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.SOUND) { // Sound Edit STR
										
										#region Sound
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.SND] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.SND)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.SND] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.ENTITY) { // Entity Edit HYBRID
										
										#region Entity
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.ENT] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.ENT)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.ENT] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.CLICK) { // Entity Edit V
										
										#region Click
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.CLK] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.CLK)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.CLK] = keyboard_string
											
										#endregion
										
									} else if(ESedit == EDIT.SURFACE) { // Entity Edit HYBRID
										
										#region Surface
											
											if(keyboard_check_pressed(vk_backspace)
												and ES[$ string(ESsel)][$ K.SRF] == "") {
												variable_struct_remove(ES[$ string(ESsel)],K.SRF)
												ESedit = N
											} else ES[$ string(ESsel)][$ K.SRF] = keyboard_string
											
										#endregion
										
									}
									
									#region Finish Edit (String -> Real etc. Conversions)
										
										if(keyboard_check_pressed(vk_enter)) {
											
											if(ESedit == EDIT.TIMER) {
												
												#region Timer
													
													if(is_string_real(ES[$ string(ESsel)][$ K.TMR]))
														ES[$ string(ESsel)][$ K.TMR] = real(ES[$ string(ESsel)][$ K.TMR]);
													else variable_struct_remove(ES[$ string(ESsel)],K.TMR);
													
												#endregion
												
											} else if(ESedit == EDIT.DELAY) {
												
												#region Delay
													
													if(is_string_real(ES[$ string(ESsel)][$ K.DL]))
														ES[$ string(ESsel)][$ K.DL] = real(ES[$ string(ESsel)][$ K.DL]);
													else variable_struct_remove(ES[$ string(ESsel)],K.DL);
													
												#endregion
												
											} else if(ESedit == EDIT.XOFFSET) {
												
												#region Delay
													
													if(is_string_real(ES[$ string(ESsel)][$ K.XOF]))
														ES[$ string(ESsel)][$ K.DL] = real(ES[$ string(ESsel)][$ K.XOF]);
													else variable_struct_remove(ES[$ string(ESsel)],K.XOF);
													
												#endregion
												
											} else if(ESedit == EDIT.YOFFSET) {
												
												#region Delay
													
													if(is_string_real(ES[$ string(ESsel)][$ K.YOF]))
														ES[$ string(ESsel)][$ K.DL] = real(ES[$ string(ESsel)][$ K.YOF]);
													else variable_struct_remove(ES[$ string(ESsel)],K.YOF);
													
												#endregion
												
											} else if(ESedit == EDIT.CLICK) {
												
												#region Click
													
													if(is_string_real(ES[$ string(ESsel)][$ K.CLK]))
														ES[$ string(ESsel)][$ K.CLK] = real(ES[$ string(ESsel)][$ K.CLK]);
													else variable_struct_remove(ES[$ string(ESsel)],K.CLK);
													
												#endregion
												
											} else if(ESedit == EDIT.ENTITY) {
												
												#region Entity
													
													if(is_string_real(ES[$ string(ESsel)][$ K.ENT])) // is Actor Value?
														ES[$ string(ESsel)][$ K.ENT] = real(ES[$ string(ESsel)][$ K.ENT]);
													// HYBRID Can also be a STR for a name to something else... So we don't remove if not real(ACTOR)...
													
												#endregion
												
											} else if(ESedit == EDIT.TO_SCENE) {
												
												#region To Scene
													
													if(is_string_real(ES[$ string(ESsel)][$ K.SCN+K.TO]))
														ES[$ string(ESsel)][$ K.SCN+K.TO] = real(ES[$ string(ESsel)][$ K.SCN+K.TO]);
													else variable_struct_remove(ES[$ string(ESsel)],K.SCN+K.TO);
													
												#endregion
												
											} else if(ESedit == EDIT.SURFACE) {
												
												#region Surface
													
													if(is_string_real(ES[$ string(ESsel)][$ K.SRF])) // is Actor Value?
														ES[$ string(ESsel)][$ K.SRF] = real(ES[$ string(ESsel)][$ K.SRF]);
													// HYBRID Can also be a STR for a name to something else... So we don't remove if not real(ACTOR)...
													
												#endregion
												
											}
											
											ESedit = N
											
										}
										
									#endregion
									
								#endregion
								
							}
							
						}
						
					#endregion
					
					#region Write everything to file
						
						if(keyboard_check(vk_control) and keyboard_check_pressed(vk_enter)) {
							
							struct_trim_and_backfill(ES)
							var _f = file_text_open_write(game_save_id+"nodes.json")
							file_text_write_string(_f,json_stringify(ES,T))
							file_text_close(_f)
							
						}
						
					#endregion
					
				}
				
			#endregion
			
		}
		
	#endregion
	
#endregion

#event draw_gui_end Debug View
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }

if(active and edit and !console) {
	
	#region Console Toggle
		
		if(keyboard_check_pressed(192)) {
			
			console = T
			edit = F
			dbgStrScrl = 0
			
		}
		
	#endregion
	
	#region Base Debug Info
		
		#region Controls...
			
			#region Toggle Debug String
				
				if(keyboard_check_pressed(vk_insert)) {
					
					dbgStrScrl = 0
					dbgStr = !dbgStr
					
				}
				
			#endregion
			
			#region Toggle Edit Help
				
				if(keyboard_check_pressed(vk_end))
					editHelp = !editHelp;
				
			#endregion
			
			#region Toggle Nest Direction
				
				if(keyboard_check_pressed(vk_multiply))
					D.diaNestDir = !D.diaNestDir;
				
			#endregion
			
			#region Toggle Dia Prev 2
				
				if(keyboard_check_pressed(vk_divide) or ds_list_empty(D.diaParL)) {
					
					if(!diaPrev2 and !ds_list_empty(D.diaParL)) {
						
						// If diaPrev2 not set and we are in dialogue...
						diaPrev2 = diaNar_get_top()
						diaPrev2i = ds_list_size(D.diaNestL)
						
					} else {
						
						// This will run if no dialogue or key was pressed and diaPrev2 was already set...
						diaPrev2 = N
						diaPrev2i = N
						diaPrev2Str = ""
						
					}
					
				}
				
			#endregion
			
			#region Dia Preview 2 Iterate Higher
				
				if(keyboard_check_pressed(vk_add) and diaPrev2) {
					
					if(diaPrev2i < ds_list_size(D.diaNestL))
						diaPrev2i++;
					
				}
				
			#endregion
			
			#region Dia Preview 2 Iterate Lower
				
				if(keyboard_check_pressed(vk_subtract) and diaPrev2) {
					
					if(diaPrev2i > 0) diaPrev2i--;
					
				}
				
			#endregion
			
		#endregion
		
		#region Debug String Write & Draw
			
			if(dbgStr) {
				
				#region Debug String Scrolling
					
					if(mouse_wheel_up()) {
						
						if(keyboard_check(vk_shift)) dbgStrScrl -= 12;
						else dbgStrScrl -= 6;
						
					} else if(mouse_wheel_down()) {
						
						if(keyboard_check(vk_shift)) dbgStrScrl += 12;
						else dbgStrScrl += 6;
						
					}
					
				#endregion
				
				#region Add Editor Help...
					
					if(editHelp) {
						
						dbgStr1 += "M - Message/String\n"
							+"R - To Scene\n"
							+"F - Find Toggle\n"
							+"L - Highlight\n"
							+"H - Hover\n"
							+"K - Destroy\n"
							+"T - Timer\n"
							+"D - Delay\n"
							+"A - Anim\n"
							+"S - Sprite\n"
							+"O - Sound\n"
							+"E - Entity\n"
							+"C - Click\n"
							+"U - Surface\n"
							+"X - X Offset\n"
							+"Y - Y Offset\n"
						
					}
					
				#endregion
				
				#region Game Globals & Variables...
					
					dbgStr1 += "Game State: "
					switch(D.game_state) {
						
						case GAME.INIT: dbgStr1 += "INIT"; break;
						case GAME.MENU: dbgStr1 += "MENU"; break;
						case GAME.PLAY: dbgStr1 += "PLAY"; break;
						default: dbgStr1 += "Error"; break;
						
					}
					dbgStr1 += "\nMouse Win PCT X/Y: "+string(MXPCT)+"/"+string(MYPCT)
					if(is(S)) {
						
						if(variable_instance_exists(S,string(D.scni)))
							if(variable_instance_exists(S[$ string(D.scni)],K.BG0+K.SPR)) {
								
								// Add Scene Stuff
								dbgStr1 += "\nScene: "+sprite_get_name(S[$ string(D.scni)][$ K.BG0+K.SPR])
									+"\nScene I: "+string(D.scni)
									+"\nScene State: "
									
								switch(D.scene_state) {
									
									case GAME.INIT: dbgStr1 += "INIT"; break;
									case GAME.MENU: dbgStr1 += "MENU"; break;
									case GAME.PLAY: dbgStr1 += "PLAY"; break;
									default: dbgStr1 += "Error"; break;
									
								}
								
							}
						
					}
					dbgStr1 += "\nMouse BG X/Y pct: "+string(D.bgmxpct)+"/"+string(D.bgmypct)
					dbgStr1 += "\nBG DLT X/Y: "+string(D.bgdltx)+"/"+string(D.bgdlty)
					dbgStr1 += "\nInstance Count: "+string(instance_count)
					
				#endregion
				
				#region Scene Variabls
					
					#region Scene L/R Actors (Close)
						
						var _scnActArr = get_scnActArr(N)
						if(is(_scnActArr)) {
							
							dbgStr1 += "\nScene Actor Array: [0]: "
							// Left
							if(instance_of(_scnActArr[0],oChar)) dbgStr1 += ACTORn[_scnActArr[0].uid];
							else dbgStr1 += "None";
							dbgStr1 += " / [1]: "
							// Right
							if(instance_of(_scnActArr[1],oChar)) dbgStr1 += ACTORn[_scnActArr[1].uid];
							else dbgStr1 += "None";
							
						}
						
					#endregion
					
				#endregion
				
				#region Player Variables...
					
					if(P.suited) dbgStr1 += "\nPlayer is Suited";
					else dbgStr1 += "\nPlayer is NOT Suited";
					dbgStr1 += "\nParty Size: "+string(ds_list_size(P.party))
					
				#endregion
				
				#region Debug Marker Variables...
					
					if(markerStr != "") {
						
						dbgStr1 += "\n\n[Debug Markers Start]"
						dbgStr1 += markerStr
						dbgStr1 += "\n[Debug Markers End]\n"
						
					}
					
				#endregion
				
				#region Dialogue Pre-Vars
					
					dbgStr1 += "\nPar Dia List Count: "+string(ds_list_size(D.diaParL))
					dbgStr1 += "\nNest Dia List Count: "+string(ds_list_size(D.diaNestL))
					dbgStr1 += "\nDia Inst: "+string(D.diaInstArr);
					if(D.diaContinue) dbgStr1 += "\nDia Continue...";
					if(D.diaDone) dbgStr1 += "\nDia Done...";
					if(D.diaLnkA != N) dbgStr1 += "\nDia Link A:["+ACTORn[D.diaLnkA[0]]+","+string(is_struct(D.diaLnkA[1]))+"]";
					if(D.diaLnkB != N) dbgStr1 += "\nDia Link B:["+ACTORn[D.diaLnkB[0]]+","+string(is_struct(D.diaLnkB[1]))+"]";
					if(D.diaLnkC != N) dbgStr1 += "\nDia Link C:["+ACTORn[D.diaLnkC[0]]+","+string(is_struct(D.diaLnkC[1]))+"]";
					if(D.diaLnkD != N) dbgStr1 += "\nDia Link D:["+ACTORn[D.diaLnkD[0]]+","+string(is_struct(D.diaLnkD[1]))+"]";
					if(D.diaLnkE != N) dbgStr1 += "\nDia Link E:["+ACTORn[D.diaLnkE[0]]+","+string(is_struct(D.diaLnkE[1]))+"]";
					if(D.diaAnimTo != N) dbgStr1 += "\nDia Anim To: "+string(D.diaAnimTo);
					
				#endregion
				
				#region Selected Editor Struct...
					
					if(ESsel) dbgStr2 = "\n"+json_stringify(ES[$ string(ESsel)],T);
					
				#endregion
				
				#region Dialogue...
					
					try {
						
						if(!ds_list_empty(D.diaParL)) {
							
							// In Dialogue?
							if(diaPrev2) {
								
								#region Manual Open Dialogue Previewing... (Red; Toggle:/; Change Layer:+/-;)
									
									// to diaPrev2Str
									#region Dialogue Globals & Variables...
										
										#region Focus Variables...
											
											if(D.focus) {
												
												#region Focus
													
													diaPrev2Str = "\nFocus: "+string(D.focus)+"("+D.focus.dia[$ K.FNM]+")";
													
													if(D.focus != P) {
														
														#region Character Variables; Non Player
															
															diaPrev2Str += "\nRelation: "+string(D.focus.relation);
															
														#endregion
														
													}
													
												#endregion
												
											} else diaPrev2Str = "\nFocus: None";
											
											if(D.focusL) {
												
												#region Focus Left
													
													diaPrev2Str += "\nFocus L: "+string(D.focusL)+"("+D.focusL.dia[$ K.FNM]+")";
													
													if(D.focusL != P) {
														
														#region Character Variables; Non Player
															
															diaPrev2Str += "\nRelation: "+string(D.focusL.relation);
															
														#endregion
														
													}
													
												#endregion
												
											} else diaPrev2Str += "\nFocus L: None";
											
											if(D.focusM) {
												
												#region Focus Middle
													
													diaPrev2Str += "\nFocus M: "+string(D.focusM)+"("+D.focusM.dia[$ K.FNM]+")";
													
													if(D.focusM != P) {
														
														#region Character Variables; Non Player
															
															diaPrev2Str += "\nRelation: "+string(D.focusM.relation);
															
														#endregion
														
													}
													
												#endregion
												
											} else diaPrev2Str += "\nFocus M: None";
											
											if(D.focusR) {
												
												#region Focus Right
													
													diaPrev2Str += "\nFocus R: "+string(D.focusR)+"("+D.focusR.dia[$ K.FNM]+")";
													
													if(D.focusR != P) {
														
														#region Character Variables; Non Player
															
															diaPrev2Str += "\nRelation: "+string(D.focusR.relation);
															
														#endregion
														
													}
													
												#endregion
												
											} else diaPrev2Str += "\nFocus R: None";
											
										#endregion
										if(D.diaSpeaker) diaPrev2Str += "\nSpeaker: "+string(D.diaSpeaker)+"("+D.diaSpeaker.dia[$ K.FNM]+")";
										else diaPrev2Str += "\nSpeaker: None";
										diaPrev2Str += "\nDia Delay sec/frame: "+string(D.diad/GSPD)+"/"+string(D.diad)
										diaPrev2Str += "\nLevel/Layer: "+string(ds_list_size(D.diaNestL))
										if(D.diaSoftClose) diaPrev2Str += "\nSoft Close: True/Not Done";
										else diaPrev2Str += "\nSoft Close: False/Is Done";
										if(D.diaNestDir) diaPrev2Str += "\nNesting Direction: In/Open";
										else diaPrev2Str += "\nNesting Direction: Out/Close";
										if(D.focus) {
											diaPrev2Str += "\nIter: "+string(diaNarI())
											diaPrev2Str += "\nIter Old (Par): "+string(D.focus.dia[$ K.IO])
										}
										
									#endregion
									
									// Print Dialogue Preview in Red Somewhere... TODO
									#region Show Selected Nest/Parent...
										
										var _e = N
										if(diaPrev2i > ds_list_size(D.diaNestL)) diaPrev2i = ds_list_size(D.diaNestL);
										if(diaPrev2i > 0) _e = D.diaNestL[|diaPrev2i-1];
										else _e = diaNar_get_par();
										var sks = diaNar_get_string_keys(_e)
										var rks = diaNar_get_real_keys(_e)
										for(var i = 0; i < array_length(rks); i++) rks[i] = real(rks[i]);
										array_sort(rks,T)
										diaPrev2Str += "\n[Layer = "+string(diaPrev2i)+ "]"
										for(var i = 0; i < array_length(sks); i++) diaPrev2Str += "\n[$ "+string(sks[i])+"]: "+string(_e[$ sks[i]]);
										for(var i = 0; i < array_length(rks); i++) {
											
											if(is_struct(_e[$ rks[i]])) {
												
												diaPrev2Str += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview Start]"
												var _e2 = _e[$ rks[i]]
												var sks2 = diaNar_get_string_keys(_e2)
												var rks2 = diaNar_get_real_keys(_e2)
												for(var i2 = 0; i2 < array_length(rks2); i2++) rks2[i2] = real(rks2[i2]);
												array_sort(rks2,T)
												for(var i2 = 0; i2 < array_length(sks2); i2++) diaPrev2Str += "\n--[$ "+string(sks2[i2])+"]: "+string(_e2[$ sks2[i2]]);
												for(var i2 = 0; i2 < array_length(rks2); i2++) {
													
													if(is_struct(_e2[$ rks2[i2]])) diaPrev2Str += "\n--[$ "+string(rks2[i2])+"]: [Nested Dialogue]+"
													else diaPrev2Str += "\n--[$ "+string(rks2[i2])+"]: "+string(_e2[$ rks2[i2]]);
													
												}
												diaPrev2Str += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview End]"
												
											} else diaPrev2Str += "\n[$ "+string(rks[i])+"]: "+string(_e[$ rks[i]]);
											
										}
										diaPrev2Str += "\n[Layer = "+string(diaPrev2i)+ "]"
										
									#endregion
									
								#endregion
								
							} else {
								
								// to dbgStr2
								#region Current Dialogue Preview... (Green; Auto)
									
									#region Dialogue Globals & Variables...
										
										#region Focus Variables...
											
											if(D.focus) {
												
												#region Focus
													
													dbgStr2 = "\nFocus: "+string(D.focus)+"("+D.focus.dia[$ K.FNM]+")";
													
													if(D.focus != P) {
														
														#region Character Variables; Non Player
															
															dbgStr2 += "\nRelation: "+string(D.focus.relation);
															
														#endregion
														
													}
													
												#endregion
												
											} else dbgStr2 = "\nFocus: None";
											
											if(D.focusL) {
												
												#region Focus Left
													
													dbgStr2 += "\nFocus L: "+string(D.focusL)+"("+D.focusL.dia[$ K.FNM]+")";
													
													if(D.focusL != P) {
														
														#region Character Variables; Non Player
															
															dbgStr2 += "\nRelation: "+string(D.focusL.relation);
															
														#endregion
														
													}
													
												#endregion
												
											} else dbgStr2 += "\nFocus L: None";
											
											if(D.focusM) {
												
												#region Focus Middle
													
													dbgStr2 += "\nFocus M: "+string(D.focusM)+"("+D.focusM.dia[$ K.FNM]+")";
													
													if(D.focusM != P) {
														
														#region Character Variables; Non Player
															
															dbgStr2 += "\nRelation: "+string(D.focusM.relation);
															
														#endregion
														
													}
													
												#endregion
												
											} else dbgStr2 += "\nFocus M: None";
											
											if(D.focusR) {
												
												#region Focus Right
													
													dbgStr2 += "\nFocus R: "+string(D.focusR)+"("+D.focusR.dia[$ K.FNM]+")";
													
													if(D.focusR != P) {
														
														#region Character Variables; Non Player
															
															dbgStr2 += "\nRelation: "+string(D.focusR.relation);
															
														#endregion
														
													}
													
												#endregion
												
											} else dbgStr2 += "\nFocus R: None";
											
										#endregion
										if(D.diaSpeaker) dbgStr2 += "\nSpeaker: "+string(D.diaSpeaker)+"("+D.diaSpeaker.dia[$ K.FNM]+")";
										else dbgStr2 += "\nSpeaker: None";
										dbgStr2 += "\nDia Delay sec/frame: "+string(D.diad/GSPD)+"/"+string(D.diad)
										dbgStr2 += "\nLevel/Layer: "+string(ds_list_size(D.diaNestL))
										if(D.diaSoftClose) dbgStr2 += "\nSoft Close: Don't Mark as Done (True)";
										else dbgStr2 += "\nSoft Close: Mark as Done (False)";
										if(D.diaNestDir) dbgStr2 += "\nNesting Direction: In/Open (True)";
										else dbgStr2 += "\nNesting Direction: Out/Close (False)";
										if(D.focus) {
											dbgStr2 += "\nIter: "+string(diaNarI())
											dbgStr2 += "\nIter Old (Par): "+string(D.focus.dia[$ K.IO])
										}
										
									#endregion
									
									#region Iteration Return Results
										
										if(D.diaSpeaker) {
											
											#region Current Return
												
												// Init
												var rtn = N
												var inst = N
												
												// Get Current Dialogue and Return...
												if(!ds_list_empty(D.diaNestL)) {
													
													inst = ds_list_top(D.diaNestL)
													rtn = diaNar_iterate_level(inst,D.diaSpeaker.uid,4)
													
												} else {
													
													inst = diaNar_get_par()
													rtn = diaNar_iterate_level(inst,D.diaSpeaker.uid,4)
													
												}
												
												// Show Results of Return from Iteration.....
												if(is_array(rtn)) {
													
													if(is_struct(rtn[1])) {
														
														if(rtn[1] == inst) dbgStr2 += "\nReturn: ["+string(rtn[0])+", Current Dialogue]";
														else dbgStr2 += "\nReturn: ["+string(rtn[0])+", Nested Dialogue]";
														
													} else dbgStr2 += "\nReturn: "+string(rtn);
													
												} else dbgStr2 += "\nReturn: "+string(rtn);
												
											#endregion
											
											#region Nest Return
												
												// Init
												var rtn = N
												var inst = N
												
												// Get Nested Dialogue and Return...
												if(!ds_list_empty(D.diaNestL)) inst = ds_list_top(D.diaNestL)[$ diaNarI()];
												else inst = diaNar_get_par()[$ diaNarI()];
												
												if(is_struct(inst)) {
													
													rtn = diaNar_iterate_level(inst,D.diaSpeaker.uid,4)
													
													// Show Results of Return from Iteration.....
													if(is_array(rtn)) {
														
														if(is_struct(rtn[1])) {
															
															if(rtn[1] == inst) dbgStr2 += "\nNest Return: ["+string(rtn[0])+", Nested Dialogue]";
															else dbgStr2 += "\nNest Return: ["+string(rtn[0])+", Nested+ Dialogue]";
															
														} else dbgStr2 += "\nNest Return: "+string(rtn);
														
													} else dbgStr2 += "\nNest Return: "+string(rtn);
													
												}
												
											#endregion
											
											
										}
										
									#endregion
									
									#region Current Dialogue Preview
										
										if(D.diaNestDir) {
											
											#region Up/Open
												
												if(!ds_list_empty(D.diaNestL)) {
													
													#region Nested
														
														var _e = ds_list_top(D.diaNestL)
														var sks = diaNar_get_string_keys(_e)
														var rks = diaNar_get_real_keys(_e)
														for(var i = 0; i < array_length(rks); i++) rks[i] = real(rks[i]);
														array_sort(rks,T)
														for(var i = 0; i < array_length(sks); i++) dbgStr2 += "\n[$ "+string(sks[i])+"]: "+string(_e[$ sks[i]]);
														for(var i = 0; i < array_length(rks); i++) {
															
															if(is_struct(_e[$ rks[i]])) {
																
																dbgStr2 += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview Start]"
																var _e2 = _e[$ rks[i]]
																var sks2 = diaNar_get_string_keys(_e2)
																var rks2 = diaNar_get_real_keys(_e2)
																for(var i2 = 0; i2 < array_length(rks2); i2++) rks2[i2] = real(rks2[i2]);
																array_sort(rks2,T)
																for(var i2 = 0; i2 < array_length(sks2); i2++) dbgStr2 += "\n--[$ "+string(sks2[i2])+"]: "+string(_e2[$ sks2[i2]]);
																for(var i2 = 0; i2 < array_length(rks2); i2++) {
																	
																	if(is_struct(_e2[$ rks2[i2]])) dbgStr2 += "\n--[$ "+string(rks2[i2])+"]: [Nested Dialogue]+"
																	else dbgStr2 += "\n--[$ "+string(rks2[i2])+"]: "+string(_e2[$ rks2[i2]]);
																	
																}
																dbgStr2 += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview End]"
																
															} else dbgStr2 += "\n[$ "+string(rks[i])+"]: "+string(_e[$ rks[i]]);
															
														}
														
													#endregion
													
												} else {
													
													#region Parent
														
														var _e = diaNar_get_par()
														var sks = diaNar_get_string_keys(_e)
														var rks = diaNar_get_real_keys(_e)
														for(var i = 0; i < array_length(rks); i++) rks[i] = real(rks[i]);
														array_sort(rks,T)
														for(var i = 0; i < array_length(sks); i++) dbgStr2 += "\n[$ "+string(sks[i])+"]: "+string(_e[$ sks[i]]);
														for(var i = 0; i < array_length(rks); i++) {
															
															if(is_struct(_e[$ rks[i]])) {
																
																dbgStr2 += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview Start]"
																var _e2 = _e[$ rks[i]]
																var sks2 = diaNar_get_string_keys(_e2)
																var rks2 = diaNar_get_real_keys(_e2)
																for(var i2 = 0; i2 < array_length(rks2); i2++) rks2[i2] = real(rks2[i2]);
																array_sort(rks2,T)
																for(var i2 = 0; i2 < array_length(sks2); i2++) dbgStr2 += "\n--[$ "+string(sks2[i2])+"]: "+string(_e2[$ sks2[i2]]);
																for(var i2 = 0; i2 < array_length(rks2); i2++) {
																	
																	if(is_struct(_e2[$ rks2[i2]])) dbgStr2 += "\n--[$ "+string(rks2[i2])+"]: [Nested Dialogue]+"
																	else dbgStr2 += "\n--[$ "+string(rks2[i2])+"]: "+string(_e2[$ rks2[i2]]);
																	
																}
																dbgStr2 += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview End]"
																
															} else dbgStr2 += "\n[$ "+string(rks[i])+"]: "+string(_e[$ rks[i]]);
															
														}
														
													#endregion
													
												}
												
											#endregion
											
										} else {
											
											#region Down/Close
												
												var _nxt = diaNar_next_dia(F)
												if(_nxt) {
													
													#region Show Next Dialogue...
														
														var _e = _nxt
														var sks = diaNar_get_string_keys(_e)
														var rks = diaNar_get_real_keys(_e)
														for(var i = 0; i < array_length(rks); i++) rks[i] = real(rks[i]);
														array_sort(rks,T)
														if(_nxt != diaNar_get_top()) dbgStr2 += "\n[Last Found Dialogue Start]";
														else dbgStr2 += "\n[Last Found dialogue Returned This... (Is Parent?) Start]";
														for(var i = 0; i < array_length(sks); i++) dbgStr2 += "\n[$ "+string(sks[i])+"]: "+string(_e[$ sks[i]]);
														for(var i = 0; i < array_length(rks); i++) {
															
															if(is_struct(_e[$ rks[i]])) {
																
																dbgStr2 += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview Start]"
																var _e2 = _e[$ rks[i]]
																var sks2 = diaNar_get_string_keys(_e2)
																var rks2 = diaNar_get_real_keys(_e2)
																for(var i2 = 0; i2 < array_length(rks2); i2++) rks2[i2] = real(rks2[i2]);
																array_sort(rks2,T)
																for(var i2 = 0; i2 < array_length(sks2); i2++) dbgStr2 += "\n--[$ "+string(sks2[i2])+"]: "+string(_e2[$ sks2[i2]]);
																for(var i2 = 0; i2 < array_length(rks2); i2++) {
																	
																	if(is_struct(_e2[$ rks2[i2]])) dbgStr2 += "\n--[$ "+string(rks2[i2])+"]: [Nested Dialogue]+"
																	else dbgStr2 += "\n--[$ "+string(rks2[i2])+"]: "+string(_e2[$ rks2[i2]]);
																	
																}
																dbgStr2 += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview End]"
																
															} else dbgStr2 += "\n[$ "+string(rks[i])+"]: "+string(_e[$ rks[i]]);
															
														}
														if(_nxt != diaNar_get_top()) dbgStr2 += "\n[Last Found Dialogue End]";
														else dbgStr2 += "\n[Last Found dialogue Returned This... (Is Parent?) End]";
														
													#endregion
													
												}
												
											#endregion
											
										}
										
									#endregion
									
								#endregion
								
							}
							
						} else if(diaPrev) {
							
							// to dbgStr2
							#region Preview Dialogue that is available but not open... Preview set elsewhere...
								
								dbgStr2 = ""
								var _e = diaPrev
								var sks = diaNar_get_string_keys(_e)
								var rks = diaNar_get_real_keys(_e)
								for(var i = 0; i < array_length(rks); i++) rks[i] = real(rks[i]);
								array_sort(rks,T)
								for(var i = 0; i < array_length(sks); i++) dbgStr2 += "\n[$ "+string(sks[i])+"]: "+string(_e[$ sks[i]]);
								for(var i = 0; i < array_length(rks); i++) {
									
									if(is_struct(_e[$ rks[i]])) {
										
										dbgStr2 += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview Start]"
										var _e2 = _e[$ rks[i]]
										var sks2 = diaNar_get_string_keys(_e2)
										var rks2 = diaNar_get_real_keys(_e2)
										for(var i2 = 0; i2 < array_length(rks2); i2++) rks2[i2] = real(rks2[i2]);
										array_sort(rks2,T)
										for(var i2 = 0; i2 < array_length(sks2); i2++) dbgStr2 += "\n--[$ "+string(sks2[i2])+"]: "+string(_e2[$ sks2[i2]]);
										for(var i2 = 0; i2 < array_length(rks2); i2++) {
											
											if(is_struct(_e2[$ rks2[i2]])) dbgStr2 += "\n--[$ "+string(rks2[i2])+"]: [Nested Dialogue]+"
											else dbgStr2 += "\n--[$ "+string(rks2[i2])+"]: "+string(_e2[$ rks2[i2]]);
											
										}
										dbgStr2 += "\n[$ "+string(rks[i])+"]: [Nested Dialogue Preview End]"
										
									} else dbgStr2 += "\n[$ "+string(rks[i])+"]: "+string(_e[$ rks[i]]);
									
								}
								
							#endregion
							
							// Reset diaPrev, should be set again manually if it is still needed
							diaPrev = N
							
						} else {
							
							// Clear
							if(!ESsel) dbgStr2 = "";
							diaPrev2Str = ""
							
						}
						
					} catch(_ex) {}
					
				#endregion
				
				#region Draw Debug String(s)
					
					// Olds
					draw_olds_pull()
					
					// Init
					draw_set_font(fDebug)
					if(diaPrev2Str != "") {
						
						text_prep(string_trim(diaPrev2Str));
						fgc_[1] = c.nr
						fgc_[2] = c.nr
						fgc_[3] = c.r
						fgc_[4] = c.r
						
					} else if(is_string(dbgStr2)) text_prep(string_trim(dbgStr1+dbgStr2));
					else text_prep(string_trim(dbgStr1));
					
					// Make Debug STR BG more opaque for now...
					bgc_[0] = .9
					bgc_[1] = c.blk
					bgc_[2] = c.blk
					bgc_[3] = make_color_rgb(16,16,16)
					bgc_[4] = make_color_rgb(16,16,16)
					
					// Draw Debug Strings
					draw_set_alpha(bgc_[0])
					if(MXPCT > 1/3) {
						
						// Left Side
						draw_set_hvalign([fa_left,fa_top])
						draw_rectangle_color(0,0,strw_,strh_+dbgStrScrl,bgc_[1],bgc_[2],bgc_[3],bgc_[4],F)
						draw_text_color(0,dbgStrScrl,str_,fgc_[1],fgc_[2],fgc_[3],fgc_[4],fgc_[0])
						
					} else {
						
						// Move to Right to get out of way...
						draw_set_hvalign([fa_right,fa_top])
						draw_rectangle_color(WW,0,WW-strw_,strh_+dbgStrScrl,bgc_[1],bgc_[2],bgc_[3],bgc_[4],F)
						draw_text_color(WW,dbgStrScrl,str_,fgc_[1],fgc_[2],fgc_[3],fgc_[4],fgc_[0])
						
					}
					
					// Reset
					draw_olds_push()
					dbgStr1 = ""
					markerStr = ""
					
				#endregion
				
			}
			
		#endregion
		
	#endregion
	
	#region Edit Outline
		
		// Just to remind we're in edit mode
		draw_set_alpha(1/3)
		draw_rectangle_color(20,20,WW-20,WH-20,c.r,c.r,c.r,c.r,T)
		draw_reset()
		
	#endregion
	
} else if(active and console) {
	
	#region Console Toggle
		
		if(keyboard_check_pressed(192)) {
			
			console = F
			dbgStrScrl = 0
			
		}
		
	#endregion
	
	#region Console Editor
		
		#region Console Init
			
			// Console Input
			if(!variable_instance_exists(CON,string(D.scni))) {
				
				CON[$ string(D.scni)] = {}
				CONarr = [""]
				CONstri = 0
				
			} else if(CONarr != CON[$ string(D.scni)][$ "log"]) {
				
				CONarr = [""]
				if(variable_instance_exists(CON[$ string(D.scni)],"log"))
					CONarr = CON[$ string(D.scni)][$ "log"]
				CONstri = array_length(CONarr)-1
				
			}
			
			if(CONinit) {
				
				keyboard_string = CONarr[CONstri]
				CONinit = F
				
			}
			
		#endregion
		
		#region Debug String Scrolling
			
			if(mouse_wheel_up()) {
				
				if(keyboard_check(vk_shift)) dbgStrScrl -= 12;
				else dbgStrScrl -= 6;
				
			} else if(mouse_wheel_down()) {
				
				if(keyboard_check(vk_shift)) dbgStrScrl += 12;
				else dbgStrScrl += 6;
				
			}
			
		#endregion
		
		#region Hotkeys
			
			try {
				
				if(keyboard_check_pressed(vk_anykey)) {
					
					switch(keyboard_key) {
						
						#region Console Input Scroll
							
							case vk_up: {
								
								do {
									
									CONstri = clamp(CONstri-1,0,array_length(CONarr)-1)
									if(CONstri == 0 and CONarr[CONstri] == "") {
										
										CONstri = array_length(CONarr)-1
										break
										
									}
									
								} until(CONarr[CONstri] != "")
								keyboard_string = CONarr[CONstri]
								break
								
							}
							
							case vk_down: {
								
								do {
									
									CONstri = clamp(CONstri+1,0,array_length(CONarr)-1)
									if(CONstri == array_length(CONarr)-1) break;
									
								} until(CONarr[CONstri] != "")
								keyboard_string = CONarr[CONstri]
								break
								
							}
							
						#endregion
						
						#region Console Input Modifier (Prefix/Target)
							
							case vk_right: {
								
								switch(CONprei) {
									
									case CONSOLE.DIALOGUE: {
										
										if(CONactor < ACTOR.LAST) CONactor++; // Actor Iterate +
										else {
											
											// Loop + change From Dialogue...
											CONactor = ACTOR.LAST-1
											// Console Target Change +
											if(CONprei < CONSOLE.LAST) CONprei++; // Iterate
											else CONprei = CONSOLE.FIRST+1; // Loop
											
										}
										break
										
									}
									
									case CONSOLE.NARRATIVE: {
										
										if(CONactor < ACTOR.LAST) CONactor++; // Actor Iterate +
										else {
											
											// Loop + change From Dialogue...
											CONactor = ACTOR.LAST-1
											// Console Target Change +
											if(CONprei < CONSOLE.LAST) CONprei++; // Iterate
											else CONprei = CONSOLE.FIRST+1; // Loop
											
										}
										break
										
									}
									
									default: {
										
										// Console Target Change +
										if(CONprei < CONSOLE.LAST) CONprei++; // Iterate
										else CONprei = CONSOLE.FIRST+1; // Loop
										break
										
									}
									
								}
								break
								
							}
							
							case vk_left: {
								
								switch(CONprei) {
									
									case CONSOLE.DIALOGUE: {
										
										if(CONactor > ACTOR.FIRST) CONactor--; // Actor Iterate -
										else {
											
											// Loop + change From Dialogue...
											CONactor = ACTOR.FIRST+1
											// Console Target Change -
											if(CONprei > CONSOLE.FIRST) CONprei--; // Iterate
											else CONprei = CONSOLE.LAST-1; // Loop
											
										}
										break
										
									}
									
									case CONSOLE.NARRATIVE: {
										
										if(CONactor > ACTOR.FIRST) CONactor--; // Actor Iterate -
										else {
											
											// Loop + change From Dialogue...
											CONactor = ACTOR.FIRST+1
											// Console Target Change -
											if(CONprei > CONSOLE.FIRST) CONprei--; // Iterate
											else CONprei = CONSOLE.LAST-1; // Loop
											
										}
										break
										
									}
									
									default: {
										
										// Console Target Change -
										if(CONprei > CONSOLE.FIRST) CONprei--; // Iterate
										else CONprei = CONSOLE.LAST-1; // Loop
										break
										
									}
									
								}
								break
								
							}
							
						#endregion
						
						#region String Hotkeys
							
							case vk_f1: keyboard_string += "[$ \"0\"]";break;
							case vk_f2: keyboard_string += "[$ \"1\"]";break;
							case vk_f3: keyboard_string += "[$ \"2\"]";break;
							case vk_f4: keyboard_string += "[$ \"3\"]";break;
							case vk_f5: keyboard_string += "[$ \"4\"]";break;
							case vk_f6: keyboard_string += "[$ \"5\"]";break;
							case vk_f7: keyboard_string += "[$ \"6\"]";break;
							case vk_f8: keyboard_string += "[$ \"7\"]";break;
							case vk_f9: keyboard_string += "[$ \"8\"]";break;
							case vk_f10: keyboard_string += "[$ \"9\"]";break;
							case vk_f11: keyboard_string += "[$ \"10\"]";break;
							case vk_f12: keyboard_string += "[$ \""+string(D.scni)+"\"]";break;
							
						#endregion
						
					}
					
				}
				
			} catch(_ex) {}
			
		#endregion
		
		#region Input Update
			
			CONarr[CONstri] = string_copy(keyboard_string,0,string_length(keyboard_string))
			CON[$ string(D.scni)][$ "log"] = CONarr
			
		#endregion
		
		#region Console Confirm Input
			
			if(keyboard_check(vk_control) and keyboard_check_pressed(vk_enter)) {
				
				#region Set Output
					
					// Ensure Output Exists
					if(!variable_instance_exists(CON[$ string(D.scni)],"output"))
						CON[$ string(D.scni)][$ "output"] = ""
					
					var skip = 0
					for(var i = 0; i < array_length(CONarr); i++) {
						
						if(CONarr[i] == "") skip++;
						else CON[$ string(D.scni)][$ "output"] += CONpre+CONarr[i-skip]+"\n";
						
					}
					
				#endregion
				
				#region Write Scene File
					
					var _f = file_text_open_write(game_save_id+"console"+string(D.scni)+".json")
					var str = CON[$ string(D.scni)][$ "output"]
					file_text_write_string(_f,str)
					file_text_close(_f)
					
				#endregion
				
				#region Write Console File
					
					var _f = file_text_open_write(game_save_id+"console.json")
					var str = json_stringify(CON,T)
					file_text_write_string(_f,str)
					file_text_close(_f)
					
				#endregion
				
			} else if(keyboard_check_pressed(vk_enter)) {
				
				#region Confirm Input Edit/Entry
					
					if(CONstri == array_length(CONarr)-1) {
						
						#region New Entry
							
							var _spt =  string_split_ext(CONarr[CONstri],["\"] = ","\""],T)
							
							if(array_length(_spt) <= 1) {
								
								// Append
								keyboard_string = ""
								
							} else {
								
								keyboard_string = _spt[0]+"\"] = "
								if(array_length(_spt) >= 3) keyboard_string += _spt[1]+"\"";
								
							}
							
							CONstri++
							CONarr[CONstri] = keyboard_string
							
						#endregion
						
					} else {
						
						#region Previous Entry
							
							CONstri++
							keyboard_string = CONarr[CONstri]
							
							/* Un-Needed?
							var _spt =  string_split(CONarr[CONstri],"\"] = ",T)
							
							if(array_length(_spt) <= 1) {
								
								// Append
								keyboard_string = ""
								
							} else {
								
								keyboard_string = _spt[0]+"\"] = "
								
							}
							
							// Return to Latest after edit confirm
							CONarr[CONstri] = keyboard_string
							*/
							
						#endregion
						
					}
					
				#endregion
				
			}
			
		#endregion
		
		#region Draw
			
			#region Init
				
				#region Example/Legend
					
					var ex = "Example:\n"
						+"dia = {}\n"
						+"dia[$ \"name\"] = \"SYLAS\"\n"
						+"dia[$ \"sex\"] = SEX.MALE\n"
						+"dia[$ \"known\"] = F\n"
						+"dia[$ \"i\"] = 0\n"
						+"dia[$ \"cur\"] = 0\n"
						+"dia[$ \"curd\"] = GSPD*.2\n"
						+"dia[$ \"curi\"] = 0\n"
						+"dia[$ \"0\"] = {}\n"
						+"dia[$ \"0\"][$ \"0\"] = {}\n"
						+"dia[$ \"0\"][$ \"0\"][$ \"trg\"] = TRIGGER.START\n"
						+"dia[$ \"0\"][$ \"0\"][$ \"done\"] = F\n"
						+"dia[$ \"0\"][$ \"0\"][$ \"lim\"] = 2\n"
						+"dia[$ \"0\"][$ \"0\"][$ \"0\"] = \"Euurghhh....\"\n"
						+"dia[$ \"0\"][$ \"0\"][$ \"1\"] = \"Is it time already?\"\n"
						+"dia[$ \"0\"][$ \"0\"][$ \"2\"] = \"Shit! I'm late!\"\n"
						+"______________________________________________\n"
					
				#endregion
				
				var _pre = CONpre
				var _preStr = "Prefix: "+_pre+"\n"+ex+"\n"
				var _strw = 0
				var _strh = 0
				var _th = string_height_ext(">"+CONarr[CONstri],20,WW)
				var _xx = 0
				var _yy = WH // sep+padding = 30
				draw_set_font(fDebug)
				draw_set_hvalign([fa_left,fa_bottom])
				
				#region String W/H
					
					for(var i = 0; i < array_length(CONarr)-1; i++) {
						
						var _str = CONarr[i]
						_strw = max(string_width_ext(_str,20,WW),_strw)
						_strh = max(string_height_ext(_str,20,WW),_strh)
						
					}
					
				#endregion
				
			#endregion
			
			for(var i = array_length(CONarr)-1; i >= 0; i--) {
				
				var _str = CONarr[i]
				var _ih = string_height_ext(_str,20,WW)
				_th += _ih
				var _yi = -(_th+(-dbgStrScrl))
				
				if(_str == "" and i != CONstri) continue;
				if(i == CONstri) {
					
					// Old
					//str += pre+CONarr[i]+" |>CURRENT EDIT<|\n";
					draw_set_alpha(1/3)
					if(string_ends_with(_str," ")) draw_rectangle_color(_xx,_yy+_yi,string_width_ext(">"+_str+"_",20,WW),_yy+_yi-string_height_ext(">"+_str,20,WW),c.blk,c.blk,c.blk,c.blk,F);
					else draw_rectangle_color(_xx,_yy+_yi,string_width_ext(">"+_str,20,WW),_yy+_yi-string_height_ext(">"+_str,20,WW),c.blk,c.blk,c.blk,c.blk,F);
					draw_set_alpha(1)
					if(string_ends_with(_str," ")) draw_rectangle_color(_xx,_yy+_yi,string_width_ext(">"+_str+"_",20,WW),_yy+_yi-string_height_ext(">"+_str,20,WW),c.ng,c.ng,c.wht,c.wht,T);
					else draw_rectangle_color(_xx,_yy+_yi,string_width_ext(">"+_str,20,WW),_yy+_yi-string_height_ext(">"+_str,20,WW),c.ng,c.ng,c.wht,c.wht,T);
					draw_text_ext_color(_xx,_yy+_yi,">"+_str,20,WW,c.ng,c.ng,c.lg,c.lg,1)
					
				} else {
					
					draw_set_alpha(1/3)
					draw_rectangle_color(_xx,_yy+_yi,_strw,(_yy+_yi)-_ih,c.blk,c.blk,c.blk,c.blk,F)
					draw_set_alpha(1)
					draw_rectangle_color(_xx,_yy+_yi,_strw,(_yy+_yi)-_ih,c.dgry,c.dgry,c.gry,c.gry,T)
					draw_text_ext_color(_xx,_yy+_yi,_str,20,WW,c.ng,c.ng,c.lg,c.lg,1)
					
					// Old
					//str += pre+CONarr[i]+"\n";
					
				}
				
			}
			
			// Draw Input Line (Bottom)
			draw_set_alpha(1/3)
			draw_rectangle_color(_xx,_yy,WW,_yy-string_height_ext(">"+CONarr[CONstri],20,WW),c.blk,c.blk,c.blk,c.blk,F)
			draw_set_alpha(1)
			draw_text_ext_color(_xx,_yy,">"+CONarr[CONstri],20,WW,c.ng,c.ng,c.lg,c.lg,1)
			
		#endregion
		
	#endregion
	
}

if(!console) CONinit = T

#event draw_pre Insert description here
// You can write your code in this editor


#event draw_post Insert description here
// You can write your code in this editor
