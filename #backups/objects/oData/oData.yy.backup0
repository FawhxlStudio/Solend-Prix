// 2025-04-20 00:44:10
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create
#region Global Variables
	
	#region Init
		
		game_state = GAME.INIT
		diaParL = ds_list_create()
		diai = 0
		animPlay = N
		focus = N
		focusL = N
		focusR = N
		focusM = N
		fd = 4 // Frame Delay
		bgm = N
		bgmID = N
		
	#endregion
	
	#region Random Actor Asset Arrays
		
		// Actor List
		actorL = ds_list_create()
		
		cfArr = [sprCF1,sprCF2,
			sprCF3,sprCF4,sprCF5,
			sprCF6,sprCF7,sprCF8,
			sprCF9,sprCF10,sprCF11,
			sprCF12,sprCF13,sprCF14]
		cfiArr = []
		
		fArr = [sprF1,sprF2,
			sprF3,sprF4,sprF5,
			sprF6,sprF7,sprF8,
			sprF9,sprF10,sprF11,
			sprF12,sprF13,sprF14,
			sprF15,sprF16,sprF17,
			sprF18,sprF19,sprF20,
			sprF21,sprF22,sprF23,
			sprF24,sprF25,sprF26]
		fiArr = []
		
		cmArr = [sprCM1,sprCM2,
			sprCM3,sprCM4,sprCM5,
			sprCM6,sprCM7,sprCM8,
			sprCM9,sprCM10,sprCM11,
			sprCM12,sprCM13,sprCM14,
			sprCM15,sprCM16,sprCM17,
			sprCM18,sprCM19,sprCM20,
			sprCM21,sprCM22,sprCM23,
			sprCM24,sprCM25]
		cmiArr = []
		
		mArr = [sprM1,sprM2,
			sprM3,sprM4,sprM5,
			sprM6,sprM7,sprM8,
			sprM9,sprM10,sprM11,
			sprM12,sprM13,sprM14,
			sprM15]
		miArr = []
		
	#endregion
	
	// Init Draw Olds; HVO,FO,AO,CO
	draw_reset()
	
	#region Image Objects (Layers)
		
		// Sky
		skyImg = instance_create_layer(0,0,"BG",oImage)
		skyImg.persistent = T
		
		// Backdrop
		bdImg = instance_create_layer(0,0,"BG",oImage)
		bdImg.persistent = T
		
		// Background Layer 2
		bgL2Img = instance_create_layer(0,0,"BG",oImage)
		bgL2Img.persistent = T
		
		// Background Layer 1
		bgL1Img = instance_create_layer(0,0,"BG",oImage)
		bgL1Img.persistent = T
		
		// Background
		bgImg = instance_create_layer(0,0,"BG",oImage)
		bgImg.persistent = T
		
		// Middleground
		mgImg = instance_create_layer(0,0,"MG",oImage)
		mgImg.persistent = T
		
	#endregion
	
	#region Actor Objects (Layer)
		
		// Char L
		actorLeft = N
		// Char R
		actorRight = N
		
	#endregion
	
	#region Foreground
		
		fgImg = instance_create_layer(0,0,"FG",oImage)
		fgImg.persistent = T
		
	#endregion
	
	#region Global Factors
		
		wref = max(1,bgImg.sprite_width)
		href = max(1,bgImg.sprite_height)
		bgmxpct = MX/wref
		bgmypct = MY/href
		mwref = 1
		mhref = 1
		bgdltx = 1
		bgdlty = 1
		if(bbox_sanity(bgImg)) {
			
			mwref = max(1,bgImg.bbox_right)
			mhref = max(1,bgImg.bbox_bottom)
			bgdltx = bgImg.bbox_left
			bgdlty = bgImg.bbox_top
			
		}
		
	#endregion
	
#endregion

#region Gameplay Globals
	
	// Zoom
	zmn = 1.05
	z   = zmn
	zmx = 1.15
	zoomed = F
	zo = zmn
	
	// Hover
	isHvr = N
	isHvrO = N
	hvrDel = GSPD/2
	hvrDeli = 0
	hvrPct = 0
	btnHvr = F
	btnHvr2 = F
	
	// Overrides
	ctrlOverride = F
	
	// circs
	circ1 = 0
	circ1i = 0
	circ1iv = 0
	circ2 = 0
	circ2i = 0
	circ2iv = 0
	circ3 = 0
	circ3i = 0
	circ3iv = 0
	
	// Timers
	// Normal ( -> Runtime)
	fr = 0
	sc = 0
	mn = 0
	hr = 0
	// States; Randomized Start
	frs = chance(50)
	scs = chance(50)
	mns = chance(50)
	hrs = chance(50)
	
	
	
#endregion

#region Dialogue Globals
	
	diaOverride = F
	diaZmn = 1
	diaZmx = 1.2
	diaDel = GSPD
	diaDeli = 0
	diaDelPct = 0
	diaDeli2 = 0
	diaDelPct2 = 0
	diaSpeaker = N
	diaNestL = ds_list_create()
	diaTranDel = GSPD*(2/3)
	diaTranDeli = 0
	diaTranPct = 0
	diaSoftClose = F
	diad = 0
	diaNestDir = T // T == Into Nest, F == Out of Nest
	diaContinue = F
	diaLnkA = N
	diaLnkB = N
	diaLnkC = N
	diaLnkD = N
	diaLnkE = N
	diaAnimTo = N
	diaTrigi = 0
	diaEnter = F
	diaDone = F
	diaDly = GSPD*2
	diaI = 0
	diaPct = 0
	diaInstArr = N // Array to hold instance vars (i.e. [actor id, image] to transition to) ([Inst]ance [Arr]ay)
	diaImn = 0
	diaImx = diaDly
	diaInstRpt = N
	diaLBDrawn = F
	
#endregion

#region Scene Globals
	
	// Scene Basics
	scni         = -1
	scene_state  = GAME.INIT
	
	// Scene Blend/Light
	scnBlend1    = c.wht
	scnBlend2    = c.wht
	scnBlend3    = c.wht
	scnLight     = N
	scnBlendDel  = GSPD/4
	scnBlendDeli = 0
	scnBlendPct  = 0
	
	// Scene Actors
	scnActArr = []
	scnActSel = N
	
#endregion

#region Scene Struct
	
	#macro S global.scene_struct
	S = {}
	
	// Init Scene Struct
	db_scn()
	
#endregion

#region Narrative Struct WIP
	
	#region Init
		
		#macro NS global.narrative_struct
		NS = {}
		NS[$ K.I] = 0
		NS[$ K.CAR] = 0
		NS[$ K.CAR+K.DL] = GSPD*.2
		NS[$ K.CAR+K.DLI] = 0
		
	#endregion
	
	// Init Narrative Struct
	db_diaNar()
	
#endregion

#region Contextuals Map
	
	#macro CM global.contextuals_map
	CM = U
	db_context()
	cmHvr = F
	
#endregion

#region Init Char List
	
	db_act()
	
#endregion

#region Global Surfaces
	
	loadSurf = U
	
#endregion

#region Loads
	
	load_common()
	
#endregion

#event step Live Update


#event step_begin Factor Updates
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }
#region Other Updates
	
	#region Scene Actor Array & List
		
		if(array_equals(scnActArr,[])) {
			
			#region Loop Through Scenes...
				
				var _scnKs = variable_instance_get_sorted_numKeys(S,T)
				scnActArr[array_length(_scnKs)-1] = [N,N] // Init Array to Final Size
				for(var i = 0; i < array_length(_scnKs); i++) {
					
					// Get Scene I
					var _scni = _scnKs[i]
					
					#region Close Actors
						
						#region Init
							
							var _ks = variable_instance_get_sorted_strKeys(S[$ _scni],T)
							var _locked = (array_contains(_ks,K.ACT+K.LCK) and S[$ _scni][$ K.ACT+K.LCK])
							scnActArr[_scni] = [N,N]
							
						#endregion
						
						#region Defined Actors
							
							#region Actor Left?
								
								if(variable_instance_exists(S[$ _scni],K.ACT+K.LFT) and !instance_of(S[$ _scni][$ K.ACT+K.LFT],oChar)) {
									
									// Get/Make Char Object...
									if(S[$ _scni][$ K.ACT+K.LFT] == ACTOR.RANDOM) {
										
										scnActArr[_scni][0] = db_act_rnd(_scni,T)
										if(instance_of(scnActArr[_scni][0],oChar)) S[$ _scni][$ K.ACT+K.LFT] = scnActArr[_scni][0].ruid;
										
									} else scnActArr[_scni][0] = actor_find(S[$ _scni][$ K.ACT+K.LFT]);
									
									// Undefined if Fail
									if(!instance_of(scnActArr[_scni][0],oChar)) scnActArr[_scni][0] = U;
									
								} else if(instance_of(S[$ _scni][$ K.ACT+K.LFT],oChar)) scnActArr[_scni][0] = S[$ _scni][$ K.ACT+K.LFT];
								if(_locked and !instance_of(scnActArr[_scni][0],oChar)) scnActArr[_scni][0] = U;
								
							#endregion
							
							#region Actor Right?
								
								if(variable_instance_exists(S[$ _scni],K.ACT+K.RHT) and !instance_of(S[$ _scni][$ K.ACT+K.RHT],oChar)) {
									
									// Get/Make Char Object...
									if(S[$ _scni][$ K.ACT+K.RHT] == ACTOR.RANDOM) {
										
										scnActArr[_scni][1] = db_act_rnd(_scni,T);
										if(instance_of(scnActArr[_scni][1],oChar)) S[$ _scni][$ K.ACT+K.RHT] = scnActArr[_scni][1].ruid;
										
									} else scnActArr[_scni][1] = actor_find(S[$ _scni][$ K.ACT+K.RHT]);
									
									// Undefined if Fail
									if(!instance_of(scnActArr[_scni][1],oChar)) scnActArr[_scni][1] = U;
									
								} else if(instance_of(S[$ _scni][$ K.ACT+K.RHT],oChar)) scnActArr[_scni][1] = S[$ _scni][$ K.ACT+K.RHT];
								if(_locked and !instance_of(scnActArr[_scni][1],oChar)) scnActArr[_scni][1] = U;
								
							#endregion
							
						#endregion
						
						#region Empty and Unlocked?
							
							if(!_locked) {
								
								#region Fill Empties 20% Each (N)
									
									#region Actor Left
										
										if(scnActArr[_scni][0] == N) {
											
											if(chance(33)) {
												
												scnActArr[_scni][0] = db_act_rnd(_scni,T);
												if(instance_of(scnActArr[_scni][0],oChar)) S[$ _scni][$ K.ACT+K.LFT] = scnActArr[_scni][0].ruid;
												
											} else scnActArr[_scni][0] = U;
											
										}
										
									#endregion
									
									#region Actor Right
										
										if(scnActArr[_scni][1] == N) {
											
											if(chance(33)) {
												
												scnActArr[_scni][1] = db_act_rnd(_scni,T);
												if(instance_of(scnActArr[_scni][1],oChar)) S[$ _scni][$ K.ACT+K.RHT] = scnActArr[_scni][1].ruid;
												
											} else scnActArr[_scni][1] = U;
											
										}
										
									#endregion
									
								#endregion
								
							}
							
						#endregion
						
					#endregion
					
					#region Scene Actors (CM Circles: Entity: Random (9))
						
						// TODO NEXT
						
					#endregion
					
				}
				
			#endregion
			
		}
		
	#endregion
	
	#region Scene Blend
		
		// Init
		var rgb1 = color_get_rgb(scnBlend1)
		var rgb2 = color_get_rgb(scnBlend2)
		var rgb3 = rgb1
		
		// Do blend changing?
		if(scnBlend1 != scnBlend2 and scnBlendDeli < scnBlendDel) {
			
			// Color Calc...
			rgb3[0] = lerp(rgb1[0],rgb2[0],scnBlendPct)
			rgb3[1] = lerp(rgb1[1],rgb2[1],scnBlendPct)
			rgb3[2] = lerp(rgb1[2],rgb2[2],scnBlendPct)
			scnBlend3 = color_make_rgb(rgb3)
			
			// Iterate Scene Blend Change...
			scnBlendDeli = clamp(scnBlendDeli+1,0,scnBlendDel)
			scnBlendPct = scnBlendDeli/scnBlendDel
			
			
		} else {
			
			// Finalize/Reset
			scene_set_blend(scnBlend2)
			scnBlendDeli = 0
			scnBlendPct = 0
			
		}
		
	#endregion
	
	#region Global Relative Draw Vars
		
		wref = max(1,bgImg.sprite_width)
		href = max(1,bgImg.sprite_height)
		mwref = 1
		mhref = 1
		if(bbox_sanity(bgImg)) {
			
			mwref = max(1,bgImg.bbox_right)
			mhref = max(1,bgImg.bbox_bottom)
			bgmxpct = MX/mwref
			bgmypct = MY/mhref
			bgdltx = bgImg.bbox_left
			bgdlty = bgImg.bbox_top
			
		}
		
	#endregion
	
#endregion

#event step_end Insert description here
// You can write your code in this editor


#event draw_gui Surface Inits


#event draw_gui_end Draw Loading Surface...
// Loading Screen
if(!loading_done() and is(D.loadSurf) and surface_exists(D.loadSurf))
	draw_surface_ext(D.loadSurf,0,0,1,1,0,c.wht,1);


#event draw_pre Surface Inits?

#region Init/Draw Load Surface
	
	if(is_undefined(loadSurf) or !surface_exists(loadSurf)) {
		
		// Create Surface...
		loadSurf = surface_create(WW,WH)
		surface_set_target(loadSurf)
		
		#region Draw Loading Surface
			
			// Draw BG Fade
			draw_rectangle_ext_color([-1,-1,WW,WH],0,[.8,c.blk,c.blk,c.blk,c.blk],F)
			
			// Init Text
			draw_set_font(fTitle)
			draw_set_hvalign([fa_center,fa_middle])
			var _str = "LOADING"
			var _w = WW/2
			
			// Draw Text
			draw_text_transformed_color(WW/2,WH/2,_str,.5,.5,0,c.wht,c.wht,c.gry,c.gry,1)
			
		#endregion
		
		// Reset Surface Target
		surface_reset_target()
		
	}
	
#endregion


#event draw_post Global Logic Updates Updates
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }

#region Control Override
	
	if(!ds_list_empty(diaParL) or animPlay != N or focus != N or !loading_done()) ctrlOverride = T;
	else ctrlOverride = F;
	
#endregion

#region Frame Delay
	
	if(fd > 0) fd = clamp(fd-1,0,GSPD);
	
#endregion

#region Hover Iteration
	
	if(isHvr) {
		
		// Iterate
		if(hvrDeli < hvrDel) hvrDeli = clamp(hvrDeli+1,0,hvrDel);
		hvrPct = hvrDeli/hvrDel
		
	} else {
		
		// De-Iterate
		if(hvrDeli > 0) max(0,hvrDeli--)
		hvrPct = hvrDeli/hvrDel
		
	}
	isHvrO = isHvr
	isHvr = N
	
	// Button Hover (For UI SFX)
	if(btnHvr and !btnHvr2) btnHvr = F;
	btnHvr2 = F
	
#endregion

#region Timers
	
	// Frame
	fr++
	frs = !frs
	if(fr >= GSPD) {
		
		// Second
		fr = 0
		sc++
		scs = !scs
		if(sc >= 60) {
			
			// Minute
			sc = 0
			mn++
			mns = !mns
			if(mn >= 60) {
				
				// Hour
				mn = 0
				hr++
				hrs = !hrs
				
			}
			
		}
		
	}
	
#endregion