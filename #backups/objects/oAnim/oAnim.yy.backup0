// 2025-03-18 21:20:52
#event properties (no comments/etc. here are saved)
parent_index = -1;
sprite_index = sprNA;
uses_physics = false;

#event create Init

par = N
xx = WW/2
yy = WH/2
xbd = xx
xship = -xx
xxship = irandom_range(-xx*2,-xx)
velship = .001*D.z
shipDel = GSPD*10
shipDeli = 0
shipDel2i = 0
shipDelPct = 0
shipDel2Pct = 0
xbg = xx
ybd = yy
yship = yy
ybg = yy
xpct = U
ypct = U
dltx = 0
dlty = 0
scl = 1
panMult = 1
panMultBD = -.03
panMultShip = 1/3
panMultBG = 2/3

// IMAGE Blends
LIGHTS_OFF = c.dgry
LIGHTS_DIM = c.gry
LIGHTS_ON = c.wht

animStr = N
font = fNeu
bg = sprNA
bd = sprNA
ship = sprNA
strBld = ""
strDel = 1.5
strDeli = 0
diaInst = N

// Sound Stopped
sndStp = U
tightPan = F
actionPan = F
lightFX = F
fxInst = {
	
	col       : make_color_rgb(random_range(192,255),random_range(102,153),random_range(0,51)),
	blend     : F,
	blendc    : c.r,
	dark      : F,
	cinematic : F
	
}

// Sprite Array Vars
arrSpri = N // The current step/sprite in the array used; Only the even elements are the sprites
arrSprDeli = N // Delay Iterator; 
arrSprDel = N // Next Odd Element; Delay Length
arrSprDone = F
n_z = U
n_fxi = U
n_fxdone = F
n_aln = U
n_vel = U
n_zmx = U
n_col = U

#event alarm0 Rescale
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }

if(tightPan) scl = (WW*1.1)/sprite_get_width(sprite_index)
else scl = (WW*D.zmn)/sprite_get_width(sprite_index)
if(sprite_index == sprNA and is_string(animStr) and variable_instance_exists(NS[$ animStr],K.BG0+K.SPR)) {
	
	if(is_array(NS[$ animStr][$ K.BG0+K.SPR])) {
		
		if(arrSpri == N) arrSpri = 0;
		if(tightPan) scl = (WW*1.1)/sprite_get_width(NS[$ animStr][$ K.BG0+K.SPR][arrSpri])
		else scl = (WW*D.zmn)/sprite_get_width(NS[$ animStr][$ K.BG0+K.SPR][arrSpri])
		
	} else {
		
		if(tightPan) scl = (WW*1.1)/sprite_get_width(NS[$ animStr][$ K.BG0+K.SPR])
		else scl = (WW*D.zmn)/sprite_get_width(NS[$ animStr][$ K.BG0+K.SPR])
		
	}
	
}
xx = WW/2
yy = WH/2

#event step Updates
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }

if(D.game_state == GAME.PLAY) {
	
	// Dialogue Instance
	if(diaInst == N and is_string(animStr)) diaInst = NS[$ animStr];
	
	// Iterate fx Inst
	if((lightFX or actionPan) and is_struct(fxInst)) trig_iter(fxInst);
	
	#region Init
		
		// Var Init
		var _w = 1
		var _h = 1
		var _dw = 0
		var _dh = 0
		
		// Target?
		if(sprite_index != sprNA) {
			
			#region Sprite Index NOT sprNA (Sprite Index Used)
				
				_w = sprite_width
				_h = sprite_height
				_dw = max(0,_w-WW)
				_dh = max(0,_h-WH)
				
			#endregion
			
		} else {
			
			if((is_string(animStr) and variable_instance_exists(NS[$ animStr],K.BG0+K.SPR)) or diaInst != N) {
				
				#region diaInst BG0
					
					if(is_array(diaInst[$ K.BG0+K.SPR]) and !arrSprDone) {
						
						#region BG0 Array
							
							if(is_undefined(n_z)) n_z = 1;
							if(!arrSpri) arrSpri = 0;
							proc_fx_arr(diaInst[$ K.BG0+K.SPR][arrSpri+1],(arrSpri == array_length(diaInst[$ K.BG0+K.SPR])-2))
							_w = (sprite_get_width(diaInst[$ K.BG0+K.SPR][arrSpri])*scl)*n_z
							_h = (sprite_get_height(diaInst[$ K.BG0+K.SPR][arrSpri])*scl)*n_z
							
						#endregion
						
					} else if(!is_array(diaInst[$ K.BG0+K.SPR])){
						
						#region BG0 Single Sprite
							
							_w = sprite_get_width(diaInst[$ K.BG0+K.SPR])*scl
							_h = sprite_get_height(diaInst[$ K.BG0+K.SPR])*scl
							
						#endregion
						
					}
					
					// Set Delta W/H
					_dw = max(0,_w-WW)
					_dh = max(0,_h-WH)
					
				#endregion
				
			} else {
				
				#region Default/None
					
					_w = 1
					_h = 1
					_dw = max(0,_w-WW)
					_dh = max(0,_h-WH)
					
				#endregion
				
			}
			
		}
		
	#endregion
	
	// Image Scale
	if(tightPan) {
		
		image_xscale = scl
		image_yscale = scl
		
	} else {
		
		image_xscale = scl*D.z
		image_yscale = scl*D.z
		
	}
	
	#region X Axis Updates
		
		if(!is(xpct)) {
			
			if(actionPan) {
				
				#region Action/Auto Panning
					
					var _pct = fxInst.sn/4
					dltx = -(lerp(-_dw/2,_dw/2,_pct)*panMult)
					xbd = xx-(lerp(-_dw/2,_dw/2,_pct)*panMultBD)
					xship = xx-(lerp(-_dw/2,_dw/2,_pct)*panMultShip)+xxship
					xbg = xx-(lerp(-_dw/2,_dw/2,_pct)*panMultBG)
					
				#endregion
				
			} else {
				
				var _pct = MXPCT
				#region Manual/Mouse Panning
					
					#region X Alignment
						
						if(!is_undefined(n_aln) and is_array_ext(n_aln,2,N)) {
							
							if(n_aln[0] == fa_left) _pct = 0;
							else if(n_aln[0] == fa_right) _pct = 1;
							else _pct = .5;
							
						}
						
					#endregion
					
					dltx = -(lerp(-_dw/2,_dw/2,_pct)*panMult)
					xbd = xx-(lerp(-_dw/2,_dw/2,_pct)*panMultBD)
					xship = xx-(lerp(-_dw/2,_dw/2,_pct)*panMultShip)+xxship
					xbg = xx-(lerp(-_dw/2,_dw/2,_pct)*panMultBG)
					
					
				#endregion
				
			}
			
			#region Ship XX/Velocity Updates
				
				velship = .5*D.z
				xxship += velship*(1-shipDel2Pct)
				
			#endregion
			
			// Apply
			x = xx+dltx
			
		} else {
			
			if(actionPan) x = lerp(0,(WW+D.bgImg.dltx)*D.z,fxInst.sn/2);
			else {
				
				var _pct = xpct
				#region X Alignment
					
					if(!is_undefined(n_aln) and is_array_ext(n_aln,2,N)) {
						
						if(n_aln[0] == fa_left) _pct = 0;
						else if(n_aln[0] == fa_right) _pct = 1;
						else _pct = .5;
						
					}
					
				#endregion
				x = lerp(0,(WW+D.bgImg.dltx)*D.z,_pct)
				
			}
			
		}
		
	#endregion
	
	#region Iterate Ship Delay
		
		#region Iterate the Delis, 1 before 2, and deiterate 2 if 1 is not 100%
			
			if(shipDeli < shipDel) {
				
				shipDeli++
				if(shipDel2i > 0) shipDel2i-=10;
				
			} else if(shipDel2i < shipDel) shipDel2i++;
			
		#endregion
		
		// Reset Ship Delays
		if(window_mouse_get_delta_x() != 0 or window_mouse_get_delta_y() != 0)
			shipDeli = 0;
		
		// Update Percents
		shipDelPct = shipDeli/shipDel
		shipDel2Pct = shipDel2i/shipDel
		
	#endregion
	
	#region Y Axis Updates...
		
		if(!is(ypct)) {
			
			if(actionPan) {
				
				var _pct = fxInst.csn2/4
				#region Action/Auto Panning
					
					dlty = -(lerp(-_dh/2,_dh/2,_pct)*panMult)
					ybd = yy-(lerp(-_dh/2,_dh/2,_pct)*panMultBD)
					yship = yy-(lerp(-_dh/2,_dh/2,_pct)*panMultShip)
					ybg = yy-(lerp(-_dh/2,_dh/2,_pct)*panMultBG)
					
				#endregion
				
			} else {
				
				var _pct = MYPCT
				#region Manual/Mouse Panning
					
					#region Y Alignment
						
						if(!is_undefined(n_aln) and is_array_ext(n_aln,2,N)) {
							
							if(n_aln[1] == fa_top) _pct = 0;
							else if(n_aln[1] == fa_bottom) _pct = 1;
							else _pct = .5;
							
						}
						
					#endregion
					dlty = -(lerp(-_dh/2,_dh/2,_pct)*panMult)
					ybd = yy-(lerp(-_dh/2,_dh/2,_pct)*panMultBD)
					yship = yy-(lerp(-_dh/2,_dh/2,_pct)*panMultShip)
					ybg = yy-(lerp(-_dh/2,_dh/2,_pct)*panMultBG)
					
				#endregion
				
			}
			
			// Apply
			y = yy+dlty
			
		} else {
			
			if(actionPan) y = lerp(0,(WH+D.bgImg.dlty)*D.z,fxInst.csn2);
			else {
				
				var _pct = ypct
				#region Y Alignment
					
					if(!is_undefined(n_aln) and is_array_ext(n_aln,2,N)) {
						
						if(n_aln[1] == fa_top) _pct = 0;
						else if(n_aln[1] == fa_bottom) _pct = 1;
						else _pct = .5;
						
					}
					
				#endregion
				y = lerp(0,(WH+D.bgImg.dlty)*D.z,_pct)
				
			}
			
		}
		
	#endregion
	
	// Rescale Trigger
	if(M.alarm[0] > 0) alarm[0] = 2;
	
}

#event draw Animation
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }

if(D.game_state == GAME.PLAY
    and D.scene_state == GAME.PLAY
    and D.animPlay = id
    and is(animStr)) {
	
	if(is(diaInst[$ NS[$ K.I]])) {
		
		#region Blackout
			
			draw_set_alpha(1)
			draw_rectangle_color(0,0,WW,WH,c.blk,c.blk,c.blk,c.blk,F)
			
		#endregion
		
		#region Light FX Sets...
			
			if(lightFX) {
				
				if(fxInst.blend) {
					
					if(variable_instance_exists(fxInst,"lpct"))
						image_blend = lerp_color(c.wht,fxInst.blendc,delta_pct(0,.5,fxInst.lpct));
					else image_blend = fxInst.blendc;
					
				}
				
			} else image_blend = c.wht;
			
		#endregion
		
		#region Apply Sprites...
			
			if(variable_instance_exists(diaInst,K.BD0+K.SPR)) {
				
				draw_sprite_ext(diaInst[$ K.BD0+K.SPR],0,xbd,ybd,image_xscale,image_yscale,0,image_blend,1)
				
			}
			
			#region Light FX Pre (Darkness Layer for BD0)
				
				if(lightFX) fx_pre(fxInst);
				
			#endregion
			
			if(variable_instance_exists(diaInst,K.SP0+K.SPR)) {
				
				draw_sprite_ext(diaInst[$ K.SP0+K.SPR],0,xship,yship,image_xscale/2,image_yscale/2,0,image_blend,1)
				
			}
			
			if(variable_instance_exists(diaInst,K.BG0+K.SPR)) {
				
				if(is_array(diaInst[$ K.BG0+K.SPR]) and !arrSprDone) {
					
					#region BG0 Sprite Array
						
						try {
							
							#region Init arrSpr Delay/Delay Iterator
								
								if(!arrSpri) {
									
									arrSpri = 0
									var sprs = []
									for(var i2 = 0; i2 <= array_length(diaInst[$ K.BG0+K.SPR])-2; i2+=2) sprs[array_length(sprs)] = diaInst[$ K.BG0+K.SPR][i2];
									if(sprs != []) sprite_prefetch_multi(sprs);
									
								}
								if(!arrSprDel and arrSpri <= array_length(diaInst[$ K.BG0+K.SPR])-2) {
									
									arrSprDel = diaInst[$ K.BG0+K.SPR][arrSpri+1][0]*GSPD // Ensure Delay Set...
									arrSprDeli = 0
									
								}
								
							#endregion
							
							#region Iterate arrSpr
								
								if(arrSprDeli >= arrSprDel or n_fxi >= arrSprDel) {
									
									if(arrSpri <= array_length(diaInst[$ K.BG0+K.SPR])-2) {
										
										#region More to go...
											
											arrSprDeli = 0
											arrSpri += 2 // Go to next sprite in array, skip over index with delay value
											arrSprDel = diaInst[$ K.BG0+K.SPR][arrSpri+1][0]*GSPD
											if(!is_undefined(n_z)) n_z = U;
											if(!is_undefined(n_aln)) n_aln = U;
											if(!is_undefined(n_fxi)) n_fxi = U;
											if(!is_undefined(n_vel)) n_vel = U;
											if(!is_undefined(n_zmx)) n_zmx = U;
											if(!is_undefined(n_col)) n_col = U;
											
											if(!is_undefined(n_z)) {
												
												n_z = 1
												n_fxi = 0
												// Resize
												if(tightPan) scl = ((WW*1.1)*n_z)/sprite_get_width(NS[$ animStr][$ K.BG0+K.SPR][arrSpri])
												else scl = ((WW*D.zmn)*n_z)/sprite_get_width(NS[$ animStr][$ K.BG0+K.SPR][arrSpri])
												
											} else {
												
												// Resize
												if(tightPan) scl = (WW*1.1)/sprite_get_width(NS[$ animStr][$ K.BG0+K.SPR][arrSpri])
												else scl = (WW*D.zmn)/sprite_get_width(NS[$ animStr][$ K.BG0+K.SPR][arrSpri])
												
											}
											
										#endregion
										
									} else {
										
										#region Done...
											
											arrSprDeli = N
											arrSpri = N
											arrSprDel = N
											arrSprDone = T
											
										#endregion
										
									}
									
								} else arrSprDeli++;
								
							#endregion
							
							#region Draw Current Array Sprite...
								
								if(arrSprDeli != N) {
									
									if(!is_undefined(n_col)) image_blend = n_col;
									else image_blend = c.wht;
									
									if(!is_undefined(n_z)) draw_sprite_ext(diaInst[$ K.BG0+K.SPR][arrSpri],0,xbg,ybg,scl*n_z,scl*n_z,0,image_blend,1);
									else draw_sprite_ext(diaInst[$ K.BG0+K.SPR][arrSpri],0,xbg,ybg,scl,scl,0,image_blend,1);
									
								}
								
							#endregion
							
						} catch(_ex) {
							
							#region Done...
								
								arrSprDeli = N
								arrSpri = N
								arrSprDel = N
								arrSprDone = T
								
							#endregion
							
						}
						
					#endregion
					
				} else if(!is_array(diaInst[$ K.BG0+K.SPR])) draw_sprite_ext(diaInst[$ K.BG0+K.SPR],0,xbg,ybg,image_xscale,image_yscale,0,image_blend,1);
				
			}
			
		#endregion
		
		draw_self()
		
		#region Light FX Iter
			
			if(lightFX) fx_iter(fxInst);
			
		#endregion
		
		#region SKS Actions (Beginning Only)
			
			if(diaInst[$ K.I] == 0 and D.animPlay == id) {
				
				var sks = variable_instance_get_sorted_strKeys(diaInst,F)
				for(var i = 0; i < array_length(sks); i++) {
					
					#region SKS Names
						
						var _sndsp = K.SND+K.STP
						var _sndpl = K.SND+K.PLY
						
					#endregion
					
					#region Init
						
						var k = sks[i]
						var v = diaInst[$ k]
						
					#endregion
					
					switch(k) {
						
						#region Sound
							
							case _sndsp:
								
								if(!is_array(v) and audio_exists(v)) {
									
									#region Single Sound Entry
										
										if(audio_is_playing(v)) {
											
											if(audio_sound_get_gain(v) >= 2/3) audio_sound_gain(v,0,1000);
											else if(audio_sound_get_gain(v) <= 0) audio_stop_sound(v);
											
										}
										
									#endregion
									
								} else {
									
									#region Array Process TODO
										
										//TODO
										
									#endregion
									
								}
								
							break
							
							case _sndpl:
								
								if(!is_array(v) and audio_exists(v)) {
									
									#region Single Sound Entry
										
										// Don't start a new sound if while we stop another...
										if(array_contains(sks,_sndsp)) sndStp = !audio_is_playing(diaInst[$ _sndsp]);
										
										if(is_undefined(sndStp) or sndStp) {
											
											var snd = N
											if(!audio_is_playing(v)) snd = audio_play_sound_on(mainEmt,v,T,3,0);
											if(snd != N) audio_sound_gain(snd,2/3,1000);
											
										}
										
									#endregion
									
								} else {
									
									#region Array Process TODO
										
										//TODO
										
									#endregion
									
								}
								
							break
							
						#endregion
						
					}
					
				}
				
			}
			
		#endregion
		
		#region Anim End...
			
			var _nxt = N
			if(variable_instance_exists(diaInst,K.ANM+K.NXT)) _nxt = diaInst[$ K.ANM+K.NXT];
			if(diaInst[$ K.DN] and !is_string(_nxt)) TRAN.from_anim = id; // No Next Anim; Normal Close
			else if(diaInst[$ K.DN] and is_string(_nxt)) {
				
				diaNar_anim_start(_nxt)
				instance_destroy(id)
				
			}
			
		#endregion
		
	}
    
}

#event draw_gui Text
try { /* GMLive Call */ if (live_call()) return live_result; } catch(_ex) { /* GMLive not available? */ }

if(D.game_state == GAME.PLAY and D.scene_state == GAME.PLAY and D.animPlay = id and is(animStr)) {
	
	if(is(diaInst[$ NS[$ K.I]])) {
		
		if(!diaInst[$ K.DN]) {
			
			#region Draw Dialogue
				
				#region Init
					
					if(!variable_instance_exists(diaInst,K.I)) diaInst[$ K.I] = 0;
					var _act = struct_find(diaInst,K.ACT)
					D.diaEnter = F
					
				#endregion
				
				#region Get Font from Actor UID
					
					if(!is_undefined(_act)) {
						
						var _actr = actor_find(_act)
						diaNar_draw_dialogue(diaInst,_actr,diaInst[$ K.I],F)
						
					} else diaNar_draw_dialogue(diaInst,N,diaInst[$ K.I],F);
					
				#endregion
				
				#region Iterate Dialogue...
					
					// Init
					var rcnt = diaNar_get_real_keys_count(diaInst)
					
					// Override Dialogue Continuing
					if(D.diaInstArr != N) D.diaEnter = F;
					
					// Iterator
					if(rcnt != N and D.diaEnter) {
						
						if(diaInst[$ K.I] < rcnt) diaInst[$ K.I] += 1
						else if(diaInst[$ K.I] >= rcnt) {
							
							// Anim Done
							diaInst[$ K.DN] = T
							
							#region Anim K.END Actions
								
								var ends = diaNar_get_sks_ends(variable_instance_get_sorted_strKeys(diaInst,F))
								for(var i = 0; i < array_length(ends); i++) {
									
									#region SKS Names
										
										var _snden = K.SND+K.END
										var _sndspen = K.SND+K.STP+K.END
										
									#endregion
									
									var k = ends[i]
									var v = diaInst[$ k]
									switch(k) {
										
										case _snden: 
												
											if(is_array_ext(v,4,N)) {
												
												try {
													
													audio_play_sound(v[0],v[1],v[2],v[3])
													
												} catch (_ex) {
													
													show_debug_message("[WARN: Anim K.END Actions] Unable to play sound: "+string(_ar))
													show_debug_message(_ex)
													
												}
												
											} else if(audio_exists(v)) audio_play_sound(v,4,F,2/3);
											
											
										break
										
										case _sndspen:
											
											if(!is_array(v) and audio_exists(v)) {
												
												#region Single Sound Entry
													
													if(audio_is_playing(v)) {
														
														if(audio_sound_get_gain(v) >= 2/3) audio_sound_gain(v,0,1000);
														else if(audio_sound_get_gain(v) <= 0) audio_stop_sound(v);
														
													}
													
												#endregion
												
											} else {
												
												#region Array Process TODO
													
													//TODO
													
												#endregion
												
											}
											
										break
										
									}
									
								}
								
							#endregion
							
						}
						
					}
					
				#endregion
				
			#endregion
			
		}
		
	}
	
}